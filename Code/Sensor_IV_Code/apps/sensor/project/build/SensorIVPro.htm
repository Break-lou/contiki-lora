<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\SensorIVPro.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\SensorIVPro.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Nov 16 10:15:43 2016
<BR><P>
<H3>Maximum Stack Usage =        284 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
process_thread_cycle_work_process &rArr; sensor_sample &rArr; save_sensor_data_from_ram_to_flash &rArr; save_sixteen_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[ad]">exit_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[af]">call_process</a><BR>
 <LI><a href="#[15]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">SVC_Handler</a><BR>
 <LI><a href="#[16]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">DebugMon_Handler</a><BR>
 <LI><a href="#[17]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">PendSV_Handler</a><BR>
 <LI><a href="#[1a]">PBEXT0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">PBEXT0_IRQHandler</a><BR>
 <LI><a href="#[1b]">PBEXT1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">PBEXT1_IRQHandler</a><BR>
 <LI><a href="#[1d]">LPTIMER0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">LPTIMER0_IRQHandler</a><BR>
 <LI><a href="#[1e]">DMAERR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">DMAERR_IRQHandler</a><BR>
 <LI><a href="#[1f]">DMACH0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">DMACH0_IRQHandler</a><BR>
 <LI><a href="#[20]">DMACH1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">DMACH1_IRQHandler</a><BR>
 <LI><a href="#[21]">DMACH2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">DMACH2_IRQHandler</a><BR>
 <LI><a href="#[22]">DMACH3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">DMACH3_IRQHandler</a><BR>
 <LI><a href="#[23]">DMACH4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">DMACH4_IRQHandler</a><BR>
 <LI><a href="#[24]">DMACH5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">DMACH5_IRQHandler</a><BR>
 <LI><a href="#[25]">DMACH6_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">DMACH6_IRQHandler</a><BR>
 <LI><a href="#[26]">DMACH7_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">DMACH7_IRQHandler</a><BR>
 <LI><a href="#[27]">DMACH8_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">DMACH8_IRQHandler</a><BR>
 <LI><a href="#[28]">DMACH9_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">DMACH9_IRQHandler</a><BR>
 <LI><a href="#[29]">TIMER0L_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">TIMER0L_IRQHandler</a><BR>
 <LI><a href="#[2a]">TIMER0H_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">TIMER0H_IRQHandler</a><BR>
 <LI><a href="#[2b]">TIMER1L_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">TIMER1L_IRQHandler</a><BR>
 <LI><a href="#[2c]">TIMER1H_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">TIMER1H_IRQHandler</a><BR>
 <LI><a href="#[2d]">TIMER2L_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">TIMER2L_IRQHandler</a><BR>
 <LI><a href="#[2e]">TIMER2H_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">TIMER2H_IRQHandler</a><BR>
 <LI><a href="#[2f]">ACCTR0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">ACCTR0_IRQHandler</a><BR>
 <LI><a href="#[30]">EPCA0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">EPCA0_IRQHandler</a><BR>
 <LI><a href="#[31]">USART0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">USART0_IRQHandler</a><BR>
 <LI><a href="#[33]">SPI0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">SPI0_IRQHandler</a><BR>
 <LI><a href="#[34]">SPI1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">SPI1_IRQHandler</a><BR>
 <LI><a href="#[35]">I2C0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">I2C0_IRQHandler</a><BR>
 <LI><a href="#[36]">SARADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">SARADC0_IRQHandler</a><BR>
 <LI><a href="#[37]">CMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">CMP0_IRQHandler</a><BR>
 <LI><a href="#[38]">CMP1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">CMP1_IRQHandler</a><BR>
 <LI><a href="#[39]">DTM0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">DTM0_IRQHandler</a><BR>
 <LI><a href="#[3a]">DTM1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">DTM1_IRQHandler</a><BR>
 <LI><a href="#[3b]">DTM2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">DTM2_IRQHandler</a><BR>
 <LI><a href="#[3c]">AES0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">AES0_IRQHandler</a><BR>
 <LI><a href="#[3d]">ENCDEC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">ENCDEC0_IRQHandler</a><BR>
 <LI><a href="#[3f]">VDDLOW_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">VDDLOW_IRQHandler</a><BR>
 <LI><a href="#[40]">VCPFAIL_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">VCPFAIL_IRQHandler</a><BR>
 <LI><a href="#[41]">DCDC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">DCDC_IRQHandler</a><BR>
 <LI><a href="#[43]">IDAC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">IDAC0_IRQHandler</a><BR>
 <LI><a href="#[44]">PLL0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">PLL0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ACCTR0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[3c]">AES0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[13]">BusFault_Handler</a> from si32_system_it.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[37]">CMP0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[38]">CMP1_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[41]">DCDC_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[1f]">DMACH0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[20]">DMACH1_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[21]">DMACH2_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[22]">DMACH3_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[23]">DMACH4_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[24]">DMACH5_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[25]">DMACH6_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[26]">DMACH7_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[27]">DMACH8_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[28]">DMACH9_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[1e]">DMAERR_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[39]">DTM0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[3a]">DTM1_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[3b]">DTM2_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[16]">DebugMon_Handler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[3d]">ENCDEC0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[30]">EPCA0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from si32_system_it.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[35]">I2C0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[43]">IDAC0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[1d]">LPTIMER0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[12]">MemManage_Handler</a> from si32_system_it.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from si32_system_it.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[1a]">PBEXT0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[1b]">PBEXT1_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[44]">PLL0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[42]">PMATCH_IRQHandler</a> from si32_system_it.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[1c]">RTC0ALRM_IRQHandler</a> from si32_system_it.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[3e]">RTC0FAIL_IRQHandler</a> from si32_system_it.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[36]">SARADC0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[33]">SPI0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[34]">SPI1_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[18]">SysTick_Handler</a> from si32_system_it.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[45]">SystemInit</a> from system_sim3l1xx.o(.text) referenced from startup_sim3l1xx_arm.o(.text)
 <LI><a href="#[2a]">TIMER0H_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[29]">TIMER0L_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[2c]">TIMER1H_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[2b]">TIMER1L_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[2e]">TIMER2H_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[2d]">TIMER2L_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[32]">UART0_IRQHandler</a> from si32_system_it.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[31]">USART0_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[14]">UsageFault_Handler</a> from si32_system_it.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[40]">VCPFAIL_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[3f]">VDDLOW_IRQHandler</a> from startup_sim3l1xx_arm.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[19]">WDTIMER0_IRQHandler</a> from si32_system_it.o(.text) referenced from startup_sim3l1xx_arm.o(RESET)
 <LI><a href="#[49]">__main</a> from __main.o(!!!main) referenced from startup_sim3l1xx_arm.o(.text)
 <LI><a href="#[48]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[47]">fputc</a> from retarget_arm.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[128]">lora_get_pktrssi_register</a> from sx127x_radio.o(.text) referenced from sx127x_radio.o(.text)
 <LI><a href="#[127]">lora_get_rssi</a> from sx127x_radio.o(.text) referenced from sx127x_radio.o(.text)
 <LI><a href="#[124]">lora_get_rx_packet</a> from sx127x_radio.o(.text) referenced from sx127x_radio.o(.text)
 <LI><a href="#[121]">lora_init</a> from sx127x_radio.o(.text) referenced from sx127x_radio.o(.text)
 <LI><a href="#[122]">lora_reset</a> from sx127x_radio.o(.text) referenced from sx127x_radio.o(.text)
 <LI><a href="#[126]">lora_set_sleep_mode</a> from sx127x_radio.o(.text) referenced from sx127x_radio.o(.text)
 <LI><a href="#[125]">lora_set_tx_packet</a> from sx127x_radio.o(.text) referenced from sx127x_radio.o(.text)
 <LI><a href="#[129]">lora_start_cad</a> from sx127x_radio.o(.text) referenced from sx127x_radio.o(.text)
 <LI><a href="#[123]">lora_start_rx</a> from sx127x_radio.o(.text) referenced from sx127x_radio.o(.text)
 <LI><a href="#[7]">process_thread_analysis_process</a> from analysis_process.o(.text) referenced 2 times from analysis_process.o(.data)
 <LI><a href="#[8]">process_thread_cycle_work_process</a> from cycle_work_process.o(.text) referenced 2 times from cycle_work_process.o(.data)
 <LI><a href="#[a]">process_thread_data_download_process</a> from data_download_process.o(.text) referenced 2 times from data_download_process.o(.data)
 <LI><a href="#[4]">process_thread_etimer_process</a> from etimer.o(.text) referenced 2 times from etimer.o(.data)
 <LI><a href="#[5]">process_thread_key_process</a> from key_process.o(.text) referenced 2 times from key_process.o(.data)
 <LI><a href="#[6]">process_thread_led_process</a> from led_process.o(.text) referenced 2 times from led_process.o(.data)
 <LI><a href="#[b]">process_thread_quick_work_process</a> from quick_work_process.o(.text) referenced 2 times from quick_work_process.o(.data)
 <LI><a href="#[c]">process_thread_rf_transmit_process</a> from rf_transmit_process.o(.text) referenced 2 times from rf_transmit_process.o(.data)
 <LI><a href="#[9]">process_thread_sen_work_process</a> from sen_work_process.o(.text) referenced 2 times from sen_work_process.o(.data)
 <LI><a href="#[d]">process_thread_sensor_manager_process</a> from sensor_manager_process.o(.text) referenced 2 times from sensor_manager_process.o(.data)
 <LI><a href="#[e]">process_thread_sensor_rotonic_process</a> from sensor_rotonic_process.o(.text) referenced 2 times from sensor_rotonic_process.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[27b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27d]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[27e]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[27f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[25a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[4f]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[280]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[54]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[281]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[282]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[283]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[51]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[284]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[285]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[286]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[287]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[288]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[289]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[28a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[28b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[28c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[28d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[28e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[28f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[290]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[291]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[292]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[293]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[294]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[295]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[59]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[296]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[297]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[298]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[299]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[29a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[29b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[4b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[29c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[29d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[53]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[29e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[55]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; system_init_from_reset &rArr; storage_init &rArr; storage_check_stack &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[29f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[264]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[58]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2a0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2a1]"></a>__asm___7_delay_c_delayXms____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, delay.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a2]"></a>__asm___7_delay_c_delayXms____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, delay.o(.emb_text), UNUSED)

<P><STRONG><a name="[b6]"></a>delay_us</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, delay.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Xus
</UL>

<P><STRONG><a name="[2a3]"></a>__asm___16_sensor_iv_boot_c_64f1307a____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensor_iv_boot.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a4]"></a>__asm___16_sensor_iv_boot_c_64f1307a____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensor_iv_boot.o(.emb_text), UNUSED)

<P><STRONG><a name="[15e]"></a>user_app_jump</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sensor_iv_boot.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_reboot
</UL>

<P><STRONG><a name="[b9]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_time32
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_time
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_transmit_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_transmit_event
</UL>

<P><STRONG><a name="[56]"></a>main</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = main &rArr; system_init_from_reset &rArr; storage_init &rArr; storage_check_stack &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_start
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_reset
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_time
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_parameter_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_iv_low_power_manager
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_driver_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_run
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmatch_enable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autostart_start
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6a]"></a>halt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_system_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, si32_system_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_system_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, si32_system_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_system_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_system_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_system_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC0ALRM_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, si32_system_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = RTC0ALRM_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_counter_value
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_pending
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_next_expiration_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RTC0FAIL_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_system_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PMATCH_IRQHandler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, si32_system_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = PMATCH_IRQHandler &rArr; DIO0_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WDTIMER0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, si32_system_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>UART0_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, si32_system_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0_IRQHandler &rArr; rotonic_rec_data &rArr; uart_rx_disable &rArr; uart_interrupt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_rec_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>system_init_from_reset</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, si32_system_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = system_init_from_reset &rArr; storage_init &rArr; storage_check_stack &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init_from_reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstsrc_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmatch_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_debug
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_adc_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_data_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output_enable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_program_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_SET
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>DIO0_handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, dio_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DIO0_handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init_from_wakeup
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_payload
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_time
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMATCH_IRQHandler
</UL>

<P><STRONG><a name="[1b0]"></a>init_low_power_parameter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, power_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[1af]"></a>slep_low_power_parameter</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, power_manager.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[89]"></a>rf_enter_sleep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, power_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rf_enter_sleep &rArr; pb_setting_before_sleep_end_rf_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_end_rf_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_iv_low_power_manager
</UL>

<P><STRONG><a name="[8b]"></a>ext_flash_enter_sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, power_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ext_flash_enter_sleep &rArr; flash_tat_into_sleep &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_end_ext_flash_operation
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_into_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_iv_low_power_manager
</UL>

<P><STRONG><a name="[8e]"></a>mcu_enter_sleep_common</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, power_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mcu_enter_sleep_common &rArr; ext_flash_spi_init_from_wakeup &rArr; ext_flash_spi_init &rArr; get_ext_flash_clkdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_stop
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_start
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_reset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nevents
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_none_sleep_end_uart_or_usart
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_from_wakeup
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_common
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_spi_init_from_wakeup
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_pullup_from_wakeup
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init_from_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_iv_low_power_manager
</UL>

<P><STRONG><a name="[95]"></a>check_etimer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, power_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = check_etimer &rArr; etimer_next_expiration_time
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_counter_value
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_pending
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_next_expiration_time
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_iv_low_power_manager
</UL>

<P><STRONG><a name="[69]"></a>sensor_iv_low_power_manager</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, power_manager.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sensor_iv_low_power_manager &rArr; ext_flash_enter_sleep &rArr; flash_tat_into_sleep &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_nevents
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_close
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_none_sleep_end_uart_or_usart
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_end_uart_or_usart
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_end_sensor_power
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_end_adc_power
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_end_485
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_etimer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_enter_sleep_common
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_enter_sleep
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_enter_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>autostart_start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, autostart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = autostart_start &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>autostart_exit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, autostart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_exit
</UL>

<P><STRONG><a name="[6f]"></a>etimer_request_poll</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = etimer_request_poll
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0ALRM_IRQHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
</UL>

<P><STRONG><a name="[a3]"></a>etimer_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = etimer_set &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_transmit_moment_event
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_transmit_event
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_event
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_data_timeout_event
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_history_payload_timeout_event
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_quick_work_process
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_data_download_process
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sen_work_process
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_router_fail_event
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_led_process
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_key_process
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_power_rotonic
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample_collect
</UL>

<P><STRONG><a name="[a7]"></a>etimer_reset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = etimer_reset &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_quick_work_process
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sen_work_process
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_led_process
</UL>

<P><STRONG><a name="[a9]"></a>etimer_restart</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, etimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
</UL>

<P><STRONG><a name="[ab]"></a>etimer_adjust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, etimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next_sample_start_line
</UL>

<P><STRONG><a name="[2a5]"></a>etimer_expired</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, etimer.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>etimer_expiration_time</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, etimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next_sample_start_line
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_time
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample_cycle_next_expired_time
</UL>

<P><STRONG><a name="[2a6]"></a>etimer_start_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, etimer.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>etimer_pending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, etimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_next_expiration_time
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0ALRM_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_etimer
</UL>

<P><STRONG><a name="[6d]"></a>etimer_next_expiration_time</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = etimer_next_expiration_time
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0ALRM_IRQHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_etimer
</UL>

<P><STRONG><a name="[ac]"></a>etimer_stop</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = etimer_stop &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_quick_work_timeout_timer
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sen_work_process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_sen_work_timer
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_transmit_start_line_etimer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_transmit_moment_etimer
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_transmit_duration_etimer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_random_transmit_etimer
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_quick_work_timer
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_sample_cycle_timer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_transmit_timeout_etimer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_listen_broadcast_etimer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_data_download_timeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_led_etimer
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_led_process
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_key_process
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_rotonic_process
</UL>

<P><STRONG><a name="[2a7]"></a>process_alloc_event</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, process.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>process_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_init
</UL>

<P><STRONG><a name="[71]"></a>process_post_synch</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMATCH_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
</UL>

<P><STRONG><a name="[61]"></a>process_start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autostart_start
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[9c]"></a>process_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, process.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autostart_exit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_exit
</UL>

<P><STRONG><a name="[60]"></a>process_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>process_run</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = process_run &rArr; do_event &rArr; do_poll &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>process_nevents</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_iv_low_power_manager
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_enter_sleep_common
</UL>

<P><STRONG><a name="[2a8]"></a>process_nevent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, process.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>process_post</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsrc_op_handler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sms_set_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_rec_data
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disassemble_rx_frame
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_manager_process
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_data_download_ev
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_sen_work_ev
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sen_work_process
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_sensor_manager_ev
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_quick_work_ev
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_cycle_work_ev
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_history_payload
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_key_process
</UL>

<P><STRONG><a name="[a0]"></a>process_poll</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
</UL>

<P><STRONG><a name="[a6]"></a>timer_set</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_set &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>

<P><STRONG><a name="[a8]"></a>timer_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
</UL>

<P><STRONG><a name="[aa]"></a>timer_restart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
</UL>

<P><STRONG><a name="[a1]"></a>timer_expired</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_expired &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
</UL>

<P><STRONG><a name="[b2]"></a>timer_remaining</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>

<P><STRONG><a name="[b3]"></a>clock_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si32_clock_init
</UL>

<P><STRONG><a name="[9e]"></a>clock_time</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_counter_value
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_remaining
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_time
</UL>

<P><STRONG><a name="[b5]"></a>delay_Xus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_reset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Reset
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayXms
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_shining
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_shing
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_bytes
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_adc_sample
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_green_shining
</UL>

<P><STRONG><a name="[b7]"></a>delayXms</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delayXms &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Xus
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[b8]"></a>random</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>

<P><STRONG><a name="[ba]"></a>print_buff</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, debug_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[bb]"></a>printf_time</STRONG> (Thumb, 132 bytes, Stack size 96 bytes, debug_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_new
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_time
</UL>

<P><STRONG><a name="[bf]"></a>get_rand_time</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, debug_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next_sample_start_line
</UL>

<P><STRONG><a name="[c2]"></a>get_rand_time32</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, debug_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_rand_time32 &rArr; get_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_transmit_value
</UL>

<P><STRONG><a name="[c3]"></a>copy_boot_to_sram</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sensor_iv_boot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = copy_boot_to_sram
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_reboot
</UL>

<P><STRONG><a name="[15d]"></a>DEVICE_RedirectInterrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensor_iv_boot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_reboot
</UL>

<P><STRONG><a name="[2a9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>crc_ccitt_update</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, crc.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>crc_compute</STRONG> (Thumb, 176 bytes, Stack size 28 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = crc_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disassemble_rx_frame
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_payload
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_calc_sum_crc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_broadcast_program_data
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_broadcast_program
</UL>

<P><STRONG><a name="[c6]"></a>crc16_add</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, crc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ibm_generate
</UL>

<P><STRONG><a name="[c5]"></a>crc16_ibm_generate</STRONG> (Thumb, 84 bytes, Stack size 36 bytes, crc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_add
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_check_generate
</UL>

<P><STRONG><a name="[c9]"></a>check_bcc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, crc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_check_generate
</UL>

<P><STRONG><a name="[c8]"></a>lrc_generate</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, crc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_check_generate
</UL>

<P><STRONG><a name="[ca]"></a>modbus_checksum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, crc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_check_generate
</UL>

<P><STRONG><a name="[c7]"></a>modbus_check_generate</STRONG> (Thumb, 88 bytes, Stack size 28 bytes, crc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_checksum
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_generate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bcc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ibm_generate
</UL>

<P><STRONG><a name="[cc]"></a>ascii_to_hex_in_order</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, data_conversion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ascii_to_hex_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pan_set_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mac_set_handler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_hex
</UL>

<P><STRONG><a name="[cb]"></a>ascii_to_hex</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, data_conversion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_hex_in_order
</UL>

<P><STRONG><a name="[ce]"></a>hex_to_ascii_in_reverse</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, data_conversion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_ascii_in_order
</UL>

<P><STRONG><a name="[cd]"></a>hex_to_ascii_in_order</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, data_conversion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hex_to_ascii_in_order
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_ascii_in_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pan_get_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mac_get_handler
</UL>

<P><STRONG><a name="[d0]"></a>dec_to_ascii_in_reverse</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, data_conversion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dec_to_ascii_in_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>

<P><STRONG><a name="[cf]"></a>dec_to_ascii_in_order</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, data_conversion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dec_to_ascii_in_order &rArr; dec_to_ascii_in_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sfm_get_handler
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_db_get_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_da_get_handler
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsrc_get_handler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sms_get_handler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hdtc_get_handler
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setp_get_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_frq_get_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwr_get_handler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rnrwt_get_handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_slbd_get_handler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hisn_get_handler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sptd_get_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftoc_get_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tpto_get_handler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rtdc_get_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tsdc_get_handler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssti_get_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdti_get_handler
</UL>

<P><STRONG><a name="[224]"></a>ascii_to_dec_in_order</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, data_conversion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sfm_set_handler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_db_set_handler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_da_set_handler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sms_set_handler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hdtc_set_handler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setp_set_handler
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssc_set_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_frq_set_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwr_set_handler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rnrwt_set_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_slbd_set_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hisn_set_handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sptd_set_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftoc_set_handler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tpto_set_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rtdc_set_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tsdc_set_handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssti_set_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdti_set_handler
</UL>

<P><STRONG><a name="[245]"></a>get_software_version</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, software_version.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_swv_get_handler
</UL>

<P><STRONG><a name="[d1]"></a>software_version_compare</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, software_version.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[be]"></a>gmtime_new</STRONG> (Thumb, 308 bytes, Stack size 28 bytes, timestamp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
</UL>

<P><STRONG><a name="[2ac]"></a>mktime_new</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, timestamp.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>sensor_sixteen_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sensor_sixteen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>sensor_sixteen_buffer_get</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, sensor_sixteen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sensor_sixteen_buffer_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_sensor_data_payload
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assambel_sensor_sen_payload
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sixteen_data
</UL>

<P><STRONG><a name="[d6]"></a>sensor_sixteen_buffer_elements</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sensor_sixteen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensor_sixteen_buffer_elements
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_sensor_data_payload
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assambel_sensor_sen_payload
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sixteen_data
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_data_payload
</UL>

<P><STRONG><a name="[d7]"></a>save_sixteen_data</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, sensor_sixteen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = save_sixteen_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_data
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_elements
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_put
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor_data_from_ram_to_flash
</UL>

<P><STRONG><a name="[d9]"></a>sensor_sixteen_buffer_put</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, sensor_sixteen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = sensor_sixteen_buffer_put &rArr; save_sixteen_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sixteen_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_rotonic_process
</UL>

<P><STRONG><a name="[2ad]"></a>sensor_sixteen_buffer_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sensor_sixteen.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>save_sensor_data</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sensor_payload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = save_sensor_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_data_timeout_event
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_data_payload
</UL>

<P><STRONG><a name="[db]"></a>clear_rf_send_payload</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sensor_payload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_rf_send_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_quick_work_data_payload
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_data_download_payload
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assambel_data_request_payload
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assambel_sensor_sen_payload
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_sensor_router_payload
</UL>

<P><STRONG><a name="[dd]"></a>assamble_sensor_router_payload</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, sensor_payload.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_rf_send_payload
</UL>

<P><STRONG><a name="[e9]"></a>assamble_sensor_config_payload</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, sensor_payload.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_set_flash_ack
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_calibration_ack
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
</UL>

<P><STRONG><a name="[de]"></a>assambel_sensor_sen_payload</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, sensor_payload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = assambel_sensor_sen_payload &rArr; sensor_sixteen_buffer_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_rf_send_payload
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_elements
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sen_work_process
</UL>

<P><STRONG><a name="[df]"></a>assambel_data_request_payload</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, sensor_payload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = assambel_data_request_payload &rArr; clear_rf_send_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_rf_send_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
</UL>

<P><STRONG><a name="[e0]"></a>assamble_data_download_payload</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, sensor_payload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = assamble_data_download_payload &rArr; read_download_flash_data &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_download_flash_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_rf_send_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_data_download_process
</UL>

<P><STRONG><a name="[e2]"></a>assamble_quick_work_data_payload</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, sensor_payload.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_rf_send_payload
</UL>

<P><STRONG><a name="[1c5]"></a>assamble_join_net_request_payload</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, sensor_payload.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
</UL>

<P><STRONG><a name="[e3]"></a>assamble_sensor_data_payload</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, sensor_payload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = assamble_sensor_data_payload &rArr; sensor_sixteen_buffer_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_elements
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
</UL>

<P><STRONG><a name="[e4]"></a>assamble_relay_data_payload</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, sensor_payload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = assamble_relay_data_payload &rArr; get_upload_time &rArr; get_real_time &rArr; get_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upload_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
</UL>

<P><STRONG><a name="[e6]"></a>assamble_history_data_payload</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, sensor_payload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = assamble_history_data_payload &rArr; storage_read_data &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
</UL>

<P><STRONG><a name="[1b9]"></a>assamble_communication_test_payload</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, sensor_payload.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_quick_work_process
</UL>

<P><STRONG><a name="[e8]"></a>send_calibration_ack</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sensor_payload.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_sensor_config_payload
</UL>

<P><STRONG><a name="[eb]"></a>send_set_flash_ack</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sensor_payload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = send_set_flash_ack &rArr; transmit &rArr; send_sensor_payload &rArr; crc_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_sensor_config_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[ec]"></a>send_sensor_payload</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, sensor_payload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = send_sensor_payload &rArr; crc_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
</UL>

<P><STRONG><a name="[ee]"></a>disassemble_rx_frame</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, sensor_payload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = disassemble_rx_frame &rArr; crc_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_payload
</UL>

<P><STRONG><a name="[87]"></a>receive_payload</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sensor_payload.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = receive_payload &rArr; disassemble_rx_frame &rArr; crc_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disassemble_rx_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_handler
</UL>

<P><STRONG><a name="[ef]"></a>copy_sysparam_to_flash</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sensor_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_parameter_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_reboot
</UL>

<P><STRONG><a name="[f1]"></a>copy_sysparam_to_buff</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sensor_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = copy_sysparam_to_buff &rArr; read_from_flash_to_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_flash_to_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_parameter_init
</UL>

<P><STRONG><a name="[5d]"></a>sensor_parameter_init</STRONG> (Thumb, 1144 bytes, Stack size 8 bytes, sensor_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sensor_parameter_init &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bw
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_sysparam_to_buff
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_sysparam_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>update_sysparam</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sensor_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_sysparam_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sfm_set_handler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_db_set_handler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_da_set_handler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hdtc_set_handler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setp_set_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_frq_set_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwr_set_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssf_set_handler
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scr_set_handler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sbw_set_handler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rnrwt_set_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_slbd_set_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hisn_set_handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sptd_set_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftoc_set_handler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tpto_set_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rtdc_set_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tsdc_set_handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssti_set_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdti_set_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pan_set_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mac_set_handler
</UL>

<P><STRONG><a name="[f7]"></a>modify_spd_parameter</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sensor_parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = modify_spd_parameter &rArr; sx127x_modify_sf &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_sf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_cr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_bw
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radio_driver_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[2ae]"></a>clear_router_array</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sensor_parameter.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>clear_join_net_ack_info</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sensor_parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[1ae]"></a>clear_father_info</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sensor_parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[fb]"></a>sx127x_set_opmode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sx127x_set_opmode &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_frq
</UL>

<P><STRONG><a name="[ff]"></a>calc_frq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sx127x_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_frq
</UL>

<P><STRONG><a name="[fc]"></a>sx127x_standby_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sx127x_standby_mode &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_frq
</UL>

<P><STRONG><a name="[fd]"></a>sx127x_get_opmode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sx127x_get_opmode &rArr; SX1276_Read &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cad
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_rx_mode
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_frq
</UL>

<P><STRONG><a name="[fe]"></a>sx127x_modify_frq</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sx127x_modify_frq &rArr; sx127x_get_opmode &rArr; SX1276_Read &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_get_opmode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_standby_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_frq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_set_opmode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[100]"></a>sx127x_set_payload_crc_on</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sx127x_set_payload_crc_on &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_init
</UL>

<P><STRONG><a name="[101]"></a>sx127x_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sx127x_init &rArr; sx127x_modify_frq &rArr; sx127x_get_opmode &rArr; SX1276_Read &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Reset
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_InitSPI
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_InitIO
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_set_payload_crc_on
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_frq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_init
</UL>

<P><STRONG><a name="[105]"></a>sx127x_reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sx127x_reset &rArr; SX1276_Reset &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_reset
</UL>

<P><STRONG><a name="[106]"></a>sx127x_send_packet</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sx127x_send_packet &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_WriteBuffer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_EnableRFSW
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_set_tx_packet
</UL>

<P><STRONG><a name="[109]"></a>sx127x_rx_mode</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = sx127x_rx_mode &rArr; sx127x_get_opmode &rArr; SX1276_Read &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_EnableRFSW
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_get_opmode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_start_rx
</UL>

<P><STRONG><a name="[10a]"></a>sx127x_rx_vari_packet</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sx127x_rx_vari_packet &rArr; SX1276_ReadFIFO &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_ReadFIFO
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_get_rx_packet
</UL>

<P><STRONG><a name="[10c]"></a>sx127x_rx_fixi_packet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sx127x_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_ReadFIFO
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
</UL>

<P><STRONG><a name="[10d]"></a>sx127x_sleep_mode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sx127x_sleep_mode &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_set_sleep_mode
</UL>

<P><STRONG><a name="[10e]"></a>sx127x_modify_spd</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sx127x_modify_spd &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[10f]"></a>sx127x_get_rssi</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sx127x_get_rssi &rArr; SX1276_Read &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_get_pktrssi_register
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_get_rssi
</UL>

<P><STRONG><a name="[110]"></a>sx127x_read_bw</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx127x_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>

<P><STRONG><a name="[f8]"></a>sx127x_modify_bw</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sx127x_modify_bw &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_spd_parameter
</UL>

<P><STRONG><a name="[111]"></a>sx127x_read_cr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx127x_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>

<P><STRONG><a name="[f9]"></a>sx127x_modify_cr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sx127x_modify_cr &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_spd_parameter
</UL>

<P><STRONG><a name="[112]"></a>sx127x_read_sf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sx127x_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>

<P><STRONG><a name="[fa]"></a>sx127x_modify_sf</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sx127x_modify_sf &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_spd_parameter
</UL>

<P><STRONG><a name="[f3]"></a>check_bw</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, sx127x_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sbw_set_handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_parameter_init
</UL>

<P><STRONG><a name="[f4]"></a>check_cr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sx127x_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scr_set_handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_parameter_init
</UL>

<P><STRONG><a name="[f5]"></a>check_sf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sx127x_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssf_set_handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_parameter_init
</UL>

<P><STRONG><a name="[1bc]"></a>get_spd_parameter</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_spd_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_event
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_data_timeout_event
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_history_payload_timeout_event
</UL>

<P><STRONG><a name="[113]"></a>start_cad</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = start_cad &rArr; sx127x_get_opmode &rArr; SX1276_Read &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_get_opmode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_start_cad
</UL>

<P><STRONG><a name="[114]"></a>convert_sbw_to_ascii</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = convert_sbw_to_ascii
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sbw_get_handler
</UL>

<P><STRONG><a name="[115]"></a>convert_ascii_to_sbw</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = convert_ascii_to_sbw &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sbw_set_handler
</UL>

<P><STRONG><a name="[117]"></a>convert_scr_to_ascii</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = convert_scr_to_ascii
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scr_get_handler
</UL>

<P><STRONG><a name="[118]"></a>convert_ascii_to_scr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = convert_ascii_to_scr &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scr_set_handler
</UL>

<P><STRONG><a name="[119]"></a>convert_ssf_to_ascii</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = convert_ssf_to_ascii
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssf_get_handler
</UL>

<P><STRONG><a name="[11a]"></a>convert_ascii_to_ssf</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sx127x_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = convert_ascii_to_ssf &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssf_set_handler
</UL>

<P><STRONG><a name="[102]"></a>SX1276_InitIO</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sx127x_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_init
</UL>

<P><STRONG><a name="[104]"></a>SX1276_InitSPI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sx127x_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SX1276_InitSPI &rArr; spi1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_init
</UL>

<P><STRONG><a name="[11c]"></a>SX1276_SetReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sx127x_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Reset
</UL>

<P><STRONG><a name="[103]"></a>SX1276_Reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx127x_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276_Reset &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_SetReset
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Xus
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_reset
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_init
</UL>

<P><STRONG><a name="[108]"></a>SX1276_WriteBuffer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sx127x_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_write_buffer_with_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_WirteFIFO
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_send_packet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Write
</UL>

<P><STRONG><a name="[11e]"></a>SX1276_ReadBuffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx127x_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_read_buffer_with_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_ReadFIFO
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_Read
</UL>

<P><STRONG><a name="[86]"></a>SX1276_Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx127x_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cad
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_spd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_sleep_mode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_rx_fixi_packet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_rx_vari_packet
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_rx_mode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_send_packet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_set_payload_crc_on
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_frq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_standby_mode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_set_opmode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_sf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_cr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_bw
</UL>

<P><STRONG><a name="[85]"></a>SX1276_Read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx127x_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276_Read &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_read_sf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_read_cr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_read_bw
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_get_rssi
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_rx_vari_packet
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_rx_mode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_send_packet
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_set_payload_crc_on
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_frq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_get_opmode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_sf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_cr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_bw
</UL>

<P><STRONG><a name="[120]"></a>SX1276_WirteFIFO</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx127x_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_WriteBuffer
</UL>

<P><STRONG><a name="[10b]"></a>SX1276_ReadFIFO</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx127x_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SX1276_ReadFIFO &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_rx_fixi_packet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_rx_vari_packet
</UL>

<P><STRONG><a name="[2af]"></a>SX1276_WriteRxTx</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sx127x_hal.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>SX1276_EnableRFSW</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sx127x_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_rx_mode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_send_packet
</UL>

<P><STRONG><a name="[121]"></a>lora_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx127x_radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lora_init &rArr; sx127x_init &rArr; sx127x_modify_frq &rArr; sx127x_get_opmode &rArr; SX1276_Read &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x_radio.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>lora_reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sx127x_radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lora_reset &rArr; sx127x_reset &rArr; SX1276_Reset &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x_radio.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>lora_start_rx</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx127x_radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lora_start_rx &rArr; sx127x_rx_mode &rArr; sx127x_get_opmode &rArr; SX1276_Read &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_rx_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x_radio.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>lora_get_rx_packet</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx127x_radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lora_get_rx_packet &rArr; sx127x_rx_vari_packet &rArr; SX1276_ReadFIFO &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_rx_vari_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x_radio.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>lora_set_tx_packet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx127x_radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lora_set_tx_packet &rArr; sx127x_send_packet &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_send_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x_radio.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>lora_set_sleep_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx127x_radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lora_set_sleep_mode &rArr; sx127x_sleep_mode &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_sleep_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x_radio.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>lora_get_rssi</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx127x_radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lora_get_rssi &rArr; sx127x_get_rssi &rArr; SX1276_Read &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_get_rssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x_radio.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>lora_get_pktrssi_register</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sx127x_radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lora_get_pktrssi_register &rArr; sx127x_get_rssi &rArr; SX1276_Read &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_get_rssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x_radio.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>lora_start_cad</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sx127x_radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lora_start_cad &rArr; start_cad &rArr; sx127x_get_opmode &rArr; SX1276_Read &rArr; SX1276_ReadBuffer &rArr; spi1_read_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_cad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx127x_radio.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>radio_driver_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sx127x_radio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = radio_driver_init &rArr; modify_spd_parameter &rArr; sx127x_modify_sf &rArr; SX1276_Write &rArr; SX1276_WriteBuffer &rArr; spi1_write_buffer_with_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_spd_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>flash_hal_write_byte</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ext_flash_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_hal_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_enter_sleep
</UL>

<P><STRONG><a name="[2b0]"></a>flash_hal_read_byte</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, ext_flash_hal.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>flash_hal_read_buff</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, ext_flash_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_hal_read_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_get_id
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_get_status
</UL>

<P><STRONG><a name="[14f]"></a>flash_hal_write_buff</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, ext_flash_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_hal_write_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_set_page_size
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_page
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_chip
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_chip_nonblock
</UL>

<P><STRONG><a name="[152]"></a>flash_hal_write_then_read</STRONG> (Thumb, 308 bytes, Stack size 20 bytes, ext_flash_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_hal_write_then_read
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
</UL>

<P><STRONG><a name="[151]"></a>flash_hal_write_then_write</STRONG> (Thumb, 308 bytes, Stack size 20 bytes, ext_flash_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_hal_write_then_write
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data_without_erase
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data
</UL>

<P><STRONG><a name="[12a]"></a>get_ext_flash_clkdiv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ext_flash_mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ext_flash_clkdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_periph_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_spi_init
</UL>

<P><STRONG><a name="[12c]"></a>ext_flash_spi_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ext_flash_mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ext_flash_spi_init &rArr; get_ext_flash_clkdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_flash_clkdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_flash
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_spi_init_from_wakeup
</UL>

<P><STRONG><a name="[12e]"></a>ext_flash_port_init</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, ext_flash_mcu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_flash
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_spi_init_from_wakeup
</UL>

<P><STRONG><a name="[12d]"></a>ext_flash_reset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ext_flash_mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ext_flash_reset &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Xus
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_flash
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_spi_init_from_wakeup
</UL>

<P><STRONG><a name="[91]"></a>ext_flash_spi_init_from_wakeup</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ext_flash_mcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ext_flash_spi_init_from_wakeup &rArr; ext_flash_spi_init &rArr; get_ext_flash_clkdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_reset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_port_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_enter_sleep_common
</UL>

<P><STRONG><a name="[141]"></a>cache_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ext_flash_storage.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_empty
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_data_download_process
</UL>

<P><STRONG><a name="[135]"></a>cache_is_full</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ext_flash_storage.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_data
</UL>

<P><STRONG><a name="[13a]"></a>cache_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ext_flash_storage.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_read_data
</UL>

<P><STRONG><a name="[137]"></a>cache_write</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, ext_flash_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cache_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_data
</UL>

<P><STRONG><a name="[136]"></a>cache_read</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, ext_flash_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cache_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_read_data
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_data
</UL>

<P><STRONG><a name="[12f]"></a>storage_find_idle_page</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ext_flash_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_new_page
</UL>

<P><STRONG><a name="[131]"></a>storage_write_new_page</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ext_flash_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data_without_erase
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_find_idle_page
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_data
</UL>

<P><STRONG><a name="[133]"></a>storage_write_cache_buffer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ext_flash_storage.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data
</UL>

<P><STRONG><a name="[d8]"></a>storage_write_data</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, ext_flash_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_new_page
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_write
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_is_full
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor_data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sixteen_data
</UL>

<P><STRONG><a name="[138]"></a>format_flash</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, ext_flash_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = format_flash &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_page
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_reset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_port_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[24e]"></a>flash_parameter_display</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, ext_flash_storage.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsrc_get_handler
</UL>

<P><STRONG><a name="[e7]"></a>storage_read_data</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, ext_flash_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = storage_read_data &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_history_data_payload
</UL>

<P><STRONG><a name="[193]"></a>storage_cancle_read</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ext_flash_storage.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_history_payload_timeout_event
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_history_payload
</UL>

<P><STRONG><a name="[13b]"></a>storage_confirm_read</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, ext_flash_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = storage_confirm_read &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_page
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_history_payload
</UL>

<P><STRONG><a name="[13c]"></a>storage_check_stack</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, ext_flash_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = storage_check_stack &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_on
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_off
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_chip
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
</UL>

<P><STRONG><a name="[140]"></a>storage_empty</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, ext_flash_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = storage_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_data_download_process
</UL>

<P><STRONG><a name="[7b]"></a>storage_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ext_flash_storage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = storage_init &rArr; storage_check_stack &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_on
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_off
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_check_stack
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Xus
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[148]"></a>flash_tat_enter_sleep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_tat_enter_sleep &rArr; flash_hal_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hal_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_set_page_size
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_get_id
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data_without_erase
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_page
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_chip
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_into_sleep
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_data_download_process
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_flash_status
</UL>

<P><STRONG><a name="[14a]"></a>flash_tat_check_idle</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_set_page_size
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_get_id
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data_without_erase
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_page
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_chip
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_into_sleep
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_data_download_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_chip_nonblock
</UL>

<P><STRONG><a name="[14b]"></a>flash_tat_leave_sleep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_tat_leave_sleep &rArr; flash_hal_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hal_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_set_page_size
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_get_id
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data_without_erase
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_page
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_chip
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_into_sleep
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_chip_nonblock
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_flash_status
</UL>

<P><STRONG><a name="[14d]"></a>re_flash_status</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ext_flash_tat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_get_status
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_enter_sleep
</UL>

<P><STRONG><a name="[8c]"></a>flash_tat_into_sleep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = flash_tat_into_sleep &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_check_idle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_enter_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_enter_sleep
</UL>

<P><STRONG><a name="[139]"></a>flash_tat_erase_page</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = flash_tat_erase_page &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hal_write_buff
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_check_idle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_enter_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_confirm_read
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_flash
</UL>

<P><STRONG><a name="[150]"></a>flash_tat_erase_chip_nonblock</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = flash_tat_erase_chip_nonblock &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hal_write_buff
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_check_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_data_download_process
</UL>

<P><STRONG><a name="[13e]"></a>flash_tat_erase_chip</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = flash_tat_erase_chip &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hal_write_buff
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_check_idle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_enter_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_check_stack
</UL>

<P><STRONG><a name="[134]"></a>flash_tat_write_data</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = flash_tat_write_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hal_write_then_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Xus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_check_idle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_enter_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_cache_buffer
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_data
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_broadcast_program_data
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_broadcast_program
</UL>

<P><STRONG><a name="[132]"></a>flash_tat_write_data_without_erase</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = flash_tat_write_data_without_erase &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hal_write_then_write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_check_idle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_enter_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_new_page
</UL>

<P><STRONG><a name="[130]"></a>flash_tat_read_data</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hal_write_then_read
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_check_idle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_enter_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_check_stack
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_confirm_read
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_flash
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_find_idle_page
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_read_data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_download_flash_data
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_data
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_calc_sum_crc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_broadcast_program_data
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_broadcast_program
</UL>

<P><STRONG><a name="[143]"></a>flash_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = flash_init &rArr; flash_tat_set_page_size &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_set_page_size
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_get_id
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_reset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_port_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_spi_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
</UL>

<P><STRONG><a name="[144]"></a>flash_tat_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = flash_tat_init &rArr; flash_tat_get_id &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_get_id
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_reset
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_port_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_spi_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_enter_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
</UL>

<P><STRONG><a name="[7c]"></a>download_data_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, download_history.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
</UL>

<P><STRONG><a name="[153]"></a>download_cache_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, download_history.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_download_flash_data
</UL>

<P><STRONG><a name="[154]"></a>download_cache_read</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, download_history.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = download_cache_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_download_flash_data
</UL>

<P><STRONG><a name="[e1]"></a>read_download_flash_data</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, download_history.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = read_download_flash_data &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_cache_read
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_cache_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_data_download_payload
</UL>

<P><STRONG><a name="[155]"></a>clear_bit_map</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, broadcast_program.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_bit_map
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_program_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_broadcast_parameter
</UL>

<P><STRONG><a name="[7d]"></a>broadcast_program_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, broadcast_program.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = broadcast_program_init &rArr; clear_bit_map
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_map
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[157]"></a>get_broadcast_bit</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, broadcast_program.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_broadcast_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_broadcast_program
</UL>

<P><STRONG><a name="[156]"></a>storage_write_broadcast_program</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, broadcast_program.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = storage_write_broadcast_program &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_compute
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_broadcast_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
</UL>

<P><STRONG><a name="[158]"></a>flush_broadcast_program_data</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, broadcast_program.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = flush_broadcast_program_data &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_write_data
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_reboot
</UL>

<P><STRONG><a name="[15a]"></a>reset_broadcast_parameter</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, broadcast_program.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_broadcast_parameter &rArr; clear_bit_map
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_map
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_reboot
</UL>

<P><STRONG><a name="[15b]"></a>broadcast_calc_sum_crc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, broadcast_program.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = broadcast_calc_sum_crc &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_read_data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_reboot
</UL>

<P><STRONG><a name="[15c]"></a>broadcast_reboot</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, broadcast_program.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = broadcast_reboot &rArr; broadcast_calc_sum_crc &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_sysparam_to_flash
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_app_jump
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_boot_to_sram
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_RedirectInterrupts
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_calc_sum_crc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_broadcast_parameter
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_broadcast_program_data
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
</UL>

<P><STRONG><a name="[82]"></a>battery_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[161]"></a>battery_calc_value</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_sample_data
</UL>

<P><STRONG><a name="[15f]"></a>battery_sample_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = battery_sample_data &rArr; internal_initial_conversion &rArr; internal_adc_sample &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_initial_conversion
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_calc_value
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_rotonic_process
</UL>

<P><STRONG><a name="[162]"></a>saradc_init</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, battery.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SI32_SARADC_A_select_timeslot_channel_character_group
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SI32_SARADC_A_enter_12bit_mode
</UL>

<P><STRONG><a name="[165]"></a>rotonic_port_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rotonic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rotonic_port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample_collect
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_rotonic_process
</UL>

<P><STRONG><a name="[167]"></a>rotonic_port_sleep</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rotonic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_port_sleep
</UL>

<P><STRONG><a name="[1ce]"></a>rotonic_uart_enable_wake_event</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rotonic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample_collect
</UL>

<P><STRONG><a name="[1d0]"></a>rotonic_uart_disable_wake_event</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rotonic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample_event
</UL>

<P><STRONG><a name="[169]"></a>rotonic_param_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rotonic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rotonic_param_init &rArr; uart_configuration &rArr; uart_rx_disable &rArr; uart_interrupt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_rotonic_process
</UL>

<P><STRONG><a name="[16b]"></a>rotonic_sample</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rotonic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rotonic_sample &rArr; uart_send_bytes &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_bytes
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample_collect
</UL>

<P><STRONG><a name="[170]"></a>rotonic_check</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, rotonic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rotonic_check
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_rec_data
</UL>

<P><STRONG><a name="[73]"></a>rotonic_rec_data</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rotonic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rotonic_rec_data &rArr; uart_rx_disable &rArr; uart_interrupt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_disable
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_check
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>asc_toflaot</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, rotonic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = asc_toflaot
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_parse_recv_data
</UL>

<P><STRONG><a name="[171]"></a>rotonic_parse_recv_data</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, rotonic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rotonic_parse_recv_data &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asc_toflaot
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_rotonic_process
</UL>

<P><STRONG><a name="[178]"></a>data_check</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, rotonic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = data_check &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_rotonic_process
</UL>

<P><STRONG><a name="[183]"></a>stop_led_etimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, led_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_led_etimer &rArr; etimer_stop &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[19b]"></a>analyst_quick_mode_stage_payload</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, analysis_process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_payload
</UL>

<P><STRONG><a name="[184]"></a>analyst_config_payload_stage_payload</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = analyst_config_payload_stage_payload &rArr; at_disassemble &rArr; at_item_analyzer &rArr; at_analyzer &rArr; at_tsdc &rArr; at_tsdc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;download_data_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assambel_data_request_payload
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_sensor_config_payload
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_data_download_timeout
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_shing
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_at_item
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_disassemble
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_reboot
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_broadcast_program
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_payload
</UL>

<P><STRONG><a name="[189]"></a>calibrate_next_sample_start_line_by_mils</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = calibrate_next_sample_start_line_by_mils &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_sample_cycle_timer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_cycle_work_ev
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_join_payload_timeout_event
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syntime_event
</UL>

<P><STRONG><a name="[18c]"></a>syntime_event</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = syntime_event &rArr; calibrate_next_sample_start_line_by_mils &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_time
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_time_by_mils
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_next_sample_start_line_by_mils
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_request_join_payload
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_data_payload
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_father_broadcast_payload
</UL>

<P><STRONG><a name="[18e]"></a>analyst_father_broadcast_payload</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = analyst_father_broadcast_payload &rArr; syntime_event &rArr; calibrate_next_sample_start_line_by_mils &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_listen_broadcast_etimer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_shing
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syntime_event
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_payload
</UL>

<P><STRONG><a name="[191]"></a>analyst_transmit_sensor_history_payload</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = analyst_transmit_sensor_history_payload &rArr; storage_confirm_read &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_confirm_read
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_cancle_read
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_transmit_timeout_etimer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_shining
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_shing
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_payload
</UL>

<P><STRONG><a name="[195]"></a>calibrate_next_transmit_start_line_by_mils</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = calibrate_next_transmit_start_line_by_mils &rArr; post_rf_transmit_ev &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_time
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_data_payload
</UL>

<P><STRONG><a name="[196]"></a>analyst_transmit_sensor_data_payload</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = analyst_transmit_sensor_data_payload &rArr; save_sensor_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor_data
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_elements
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_transmit_timeout_etimer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_shining
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_shing
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_next_transmit_start_line_by_mils
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syntime_event
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_payload
</UL>

<P><STRONG><a name="[197]"></a>analyst_request_join_payload</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = analyst_request_join_payload &rArr; syntime_event &rArr; calibrate_next_sample_start_line_by_mils &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_transmit_timeout_etimer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_cycle_work_ev
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_shining
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_shing
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syntime_event
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_payload
</UL>

<P><STRONG><a name="[198]"></a>analyst_full_cycle_monitor_payload</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = analyst_full_cycle_monitor_payload &rArr; get_real_time &rArr; get_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_time
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_shing
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_payload
</UL>

<P><STRONG><a name="[199]"></a>analyst_broadcast_join_payload</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = analyst_broadcast_join_payload &rArr; led_blue_shing &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_shing
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_payload
</UL>

<P><STRONG><a name="[19a]"></a>analyst_payload</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = analyst_payload &rArr; analyst_config_payload_stage_payload &rArr; at_disassemble &rArr; at_item_analyzer &rArr; at_analyzer &rArr; at_tsdc &rArr; at_tsdc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_broadcast_join_payload
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_full_cycle_monitor_payload
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_request_join_payload
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_data_payload
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_history_payload
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_father_broadcast_payload
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_quick_mode_stage_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_analysis_process
</UL>

<P><STRONG><a name="[19c]"></a>get_next_sample_value</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_next_sample_value &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample
</UL>

<P><STRONG><a name="[19d]"></a>get_next_transmit_value</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_next_transmit_value &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_time
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_time32
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
</UL>

<P><STRONG><a name="[18b]"></a>post_cycle_work_ev</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cycle_work_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = post_cycle_work_ev &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_manager_process
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_join_payload_timeout_event
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_join_payload_timeout_event
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_request_join_payload
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_next_sample_start_line_by_mils
</UL>

<P><STRONG><a name="[19e]"></a>listen_router_fail_event</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, cycle_work_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = listen_router_fail_event &rArr; etimer_set &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_listen_router_event
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[19f]"></a>finish_listen_router_event</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, cycle_work_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = finish_listen_router_event &rArr; listen_router_fail_event &rArr; etimer_set &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_time
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_router_fail_event
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_shining
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[18a]"></a>stop_sample_cycle_timer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cycle_work_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_sample_cycle_timer &rArr; etimer_stop &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_next_sample_start_line_by_mils
</UL>

<P><STRONG><a name="[1a0]"></a>sensor_sample</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, cycle_work_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = sensor_sample &rArr; save_sensor_data_from_ram_to_flash &rArr; save_sixteen_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upload_time
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor_data_from_ram_to_flash
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_sensor_manager_ev
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sample_value
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[1b2]"></a>get_sample_cycle_next_expired_time</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cycle_work_process.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expiration_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next_sample_start_line
</UL>

<P><STRONG><a name="[1a7]"></a>stop_sen_work_timer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sen_work_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_sen_work_timer &rArr; etimer_stop &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sen_work_process
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[1b5]"></a>post_sen_work_ev</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sen_work_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = post_sen_work_ev &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssc_set_handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_manager_process
</UL>

<P><STRONG><a name="[1b6]"></a>post_data_download_ev</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, data_download_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = post_data_download_ev &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_data_download_process
</UL>

<P><STRONG><a name="[188]"></a>stop_data_download_timeout</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, data_download_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_data_download_timeout &rArr; etimer_stop &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
</UL>

<P><STRONG><a name="[1a8]"></a>stop_quick_work_timer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, quick_work_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_quick_work_timer &rArr; etimer_stop &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_quick_work_process
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[1b8]"></a>init_infos</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, quick_work_process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_quick_work_process
</UL>

<P><STRONG><a name="[1b1]"></a>post_quick_work_ev</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, quick_work_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = post_quick_work_ev &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[1ba]"></a>stop_quick_work_timeout_timer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, quick_work_process.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>

<P><STRONG><a name="[190]"></a>post_rf_transmit_ev</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = post_rf_transmit_ev &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_join_payload_timeout_event
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_join_payload_timeout_event
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_data_timeout_event
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_history_payload_timeout_event
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_listen_router_event
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_request_join_payload
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_data_payload
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_next_transmit_start_line_by_mils
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_history_payload
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_father_broadcast_payload
</UL>

<P><STRONG><a name="[ea]"></a>transmit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = transmit &rArr; send_sensor_payload &rArr; crc_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_set_flash_ack
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_calibration_ack
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_event
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_data_timeout_event
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_history_payload_timeout_event
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_quick_work_process
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_data_download_process
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sen_work_process
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
</UL>

<P><STRONG><a name="[1bb]"></a>transmit_sensor_history_payload_timeout_event</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = transmit_sensor_history_payload_timeout_event &rArr; etimer_set &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_cancle_read
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_spd_parameter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_shining
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit_timeout
</UL>

<P><STRONG><a name="[1bd]"></a>transmit_sensor_data_timeout_event</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = transmit_sensor_data_timeout_event &rArr; save_sensor_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_spd_parameter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor_data
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_shining
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit_timeout
</UL>

<P><STRONG><a name="[1be]"></a>request_join_payload_timeout_event</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = request_join_payload_timeout_event &rArr; post_rf_transmit_ev &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_cycle_work_ev
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_shining
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit_timeout
</UL>

<P><STRONG><a name="[1bf]"></a>broadcast_join_payload_timeout_event</STRONG> (Thumb, 510 bytes, Stack size 24 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = broadcast_join_payload_timeout_event &rArr; calibrate_next_sample_start_line_by_mils &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_time_by_mils
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_cycle_work_ev
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_shining
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_shing
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_next_sample_start_line_by_mils
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit_timeout
</UL>

<P><STRONG><a name="[1c0]"></a>sensor_process_transmit_timeout</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = sensor_process_transmit_timeout &rArr; transmit_sensor_data_timeout_event &rArr; save_sensor_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_join_payload_timeout_event
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_join_payload_timeout_event
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_data_timeout_event
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_history_payload_timeout_event
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
</UL>

<P><STRONG><a name="[1c1]"></a>detection_time</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = detection_time &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expiration_time
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
</UL>

<P><STRONG><a name="[1c3]"></a>transmit_event</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = transmit_event &rArr; etimer_set &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_spd_parameter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
</UL>

<P><STRONG><a name="[1a4]"></a>save_sensor_data_from_ram_to_flash</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = save_sensor_data_from_ram_to_flash &rArr; save_sixteen_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sixteen_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample
</UL>

<P><STRONG><a name="[1c4]"></a>sensor_process_transmit</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = sensor_process_transmit &rArr; save_sensor_data_from_ram_to_flash &rArr; save_sixteen_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_history_data_payload
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_relay_data_payload
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_sensor_data_payload
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_join_net_request_payload
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_event
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor_data_from_ram_to_flash
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
</UL>

<P><STRONG><a name="[1c6]"></a>generate_random_transmit_event</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = generate_random_transmit_event &rArr; etimer_set &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
</UL>

<P><STRONG><a name="[1c7]"></a>get_rand_transmit_time</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_rand_transmit_time &rArr; get_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_transmit_moment_event
</UL>

<P><STRONG><a name="[1c8]"></a>init_transmit_moment_event</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_transmit_moment_event &rArr; etimer_set &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_transmit_time
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
</UL>

<P><STRONG><a name="[1ac]"></a>stop_rf_random_transmit_etimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_rf_random_transmit_etimer &rArr; etimer_stop &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[192]"></a>stop_rf_transmit_timeout_etimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_rf_transmit_timeout_etimer &rArr; etimer_stop &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_request_join_payload
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_data_payload
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_history_payload
</UL>

<P><STRONG><a name="[1a9]"></a>stop_rf_transmit_moment_etimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_rf_transmit_moment_etimer &rArr; etimer_stop &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[18f]"></a>stop_rf_listen_broadcast_etimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_rf_listen_broadcast_etimer &rArr; etimer_stop &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_father_broadcast_payload
</UL>

<P><STRONG><a name="[1aa]"></a>stop_rf_transmit_duration_etimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_rf_transmit_duration_etimer &rArr; etimer_stop &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[1ab]"></a>stop_rf_transmit_start_line_etimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stop_rf_transmit_start_line_etimer &rArr; etimer_stop &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[1c9]"></a>check_next_sample_start_line</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, rf_transmit_process.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_time
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_expiration_time
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_adjust
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample_cycle_next_expired_time
</UL>

<P><STRONG><a name="[1cb]"></a>sensor_process_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sensor_manager_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sensor_process_init &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_manager_process
</UL>

<P><STRONG><a name="[1a5]"></a>post_sensor_manager_ev</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sensor_manager_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = post_sensor_manager_ev &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample_event
</UL>

<P><STRONG><a name="[1cc]"></a>sensor_process_exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sensor_manager_process.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_exit
</UL>

<P><STRONG><a name="[1cd]"></a>rotonic_sample_collect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sensor_rotonic_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rotonic_sample_collect &rArr; etimer_set &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_uart_enable_wake_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_rotonic_process
</UL>

<P><STRONG><a name="[1cf]"></a>rotonic_sample_event</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sensor_rotonic_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rotonic_sample_event &rArr; post_sensor_manager_ev &rArr; process_post
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_sensor_manager_ev
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_disable
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_uart_disable_wake_event
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_rotonic_process
</UL>

<P><STRONG><a name="[1d2]"></a>rotonic_composite_format_data</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, sensor_rotonic_process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_rotonic_process
</UL>

<P><STRONG><a name="[1d1]"></a>waiting_power_rotonic</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sensor_rotonic_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = waiting_power_rotonic &rArr; etimer_set &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_rotonic_process
</UL>

<P><STRONG><a name="[1d3]"></a>rtc_set_from_reset</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_set_from_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[1d7]"></a>rtc_alarm1_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtc_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[1d6]"></a>rtc_alarm0_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtc_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[7e]"></a>rtc_init</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_init &rArr; rtc_set_from_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm0_enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_alarm1_enable
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_from_reset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[6b]"></a>get_rtc_counter_value</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtc_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0ALRM_IRQHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_etimer
</UL>

<P><STRONG><a name="[9f]"></a>set_next_rtc_time</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>

<P><STRONG><a name="[2b1]"></a>rtc_alarm0_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc_config.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>rtc_alarm1_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc_config.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>rtc_alarm2_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtc_config.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>rtc_alarm2_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc_config.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>get_rtc_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtc_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_next_transmit_start_line_by_mils
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syntime_event
</UL>

<P><STRONG><a name="[c0]"></a>get_current_time</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_time
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_time
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_time
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_time32
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_time
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_transmit_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_transmit_event
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_time_by_mils
</UL>

<P><STRONG><a name="[66]"></a>set_current_time</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_current_time &rArr; get_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reset_source
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>set_current_time_by_mils</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = set_current_time_by_mils &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_join_payload_timeout_event
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syntime_event
</UL>

<P><STRONG><a name="[bc]"></a>get_real_time</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_real_time &rArr; get_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_upload_time
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_listen_router_event
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_transmit_value
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sample_value
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_full_cycle_monitor_payload
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_current_time
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time_by_seconds
</UL>

<P><STRONG><a name="[e5]"></a>get_upload_time</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, rtc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_upload_time &rArr; get_real_time &rArr; get_current_time
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_time
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_relay_data_payload
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample
</UL>

<P><STRONG><a name="[1d9]"></a>get_current_time_by_seconds</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtc_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_time
</UL>

<P><STRONG><a name="[1da]"></a>check_current_time</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, rtc_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_time
</UL>

<P><STRONG><a name="[b4]"></a>si32_clock_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init_from_reset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[2b5]"></a>systick_init</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, clock_config.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>get_periph_clock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_flash_clkdiv
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_configuration
</UL>

<P><STRONG><a name="[1dd]"></a>set_periph_clock</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, clock_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init_from_reset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init_after_sample
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init_before_sample
</UL>

<P><STRONG><a name="[1dc]"></a>set_system_clock</STRONG> (Thumb, 1028 bytes, Stack size 0 bytes, clock_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init_from_reset
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init_after_sample
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysclk_init_before_sample
</UL>

<P><STRONG><a name="[1db]"></a>sysclk_init_before_sample</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, clock_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_system_clock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_periph_clock
</UL>

<P><STRONG><a name="[1de]"></a>sysclk_init_after_sample</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, clock_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_system_clock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_periph_clock
</UL>

<P><STRONG><a name="[74]"></a>sysclk_init_from_reset</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, clock_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sysclk_init_from_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si32_clock_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_system_clock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_periph_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[1d8]"></a>get_reset_source</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, clock_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_reset_source
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SI32_RSTSRC_A_get_last_reset_source
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstsrc_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_time
</UL>

<P><STRONG><a name="[77]"></a>rstsrc_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clock_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rstsrc_init &rArr; get_reset_source
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reset_source
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[1a6]"></a>set_software_reset_source</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[80]"></a>pmatch_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pmatch_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[64]"></a>pmatch_enable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, pmatch_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e1]"></a>DCDC0_clk_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pmu_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC0_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC0_off
</UL>

<P><STRONG><a name="[1e0]"></a>DCDC0_off</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, pmu_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DCDC0_off
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC0_clk_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdc0_off
</UL>

<P><STRONG><a name="[1e4]"></a>vdrv_select_vbat</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pmu_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set
</UL>

<P><STRONG><a name="[2b6]"></a>vdrv_select_dcdc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pmu_config.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>vdrv_off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pmu_config.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>DCDC0_init</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, pmu_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DCDC0_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC0_clk_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_SET
</UL>

<P><STRONG><a name="[78]"></a>DCDC_SET</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, pmu_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCDC_SET &rArr; DCDC0_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sensor_rotonic_process
</UL>

<P><STRONG><a name="[1e3]"></a>dcdc0_off</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, pmu_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcdc0_off &rArr; DCDC0_off
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC0_off
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_close
</UL>

<P><STRONG><a name="[79]"></a>pmu_set</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, pmu_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pmu_set &rArr; dcdc0_off &rArr; DCDC0_off
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdc0_off
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdrv_select_vbat
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[9a]"></a>pmu_close</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, pmu_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pmu_close &rArr; dcdc0_off &rArr; DCDC0_off
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcdc0_off
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_iv_low_power_manager
</UL>

<P><STRONG><a name="[7f]"></a>open_debug</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pmu_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[17e]"></a>pinwake_enable</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, pmu_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_key_process
</UL>

<P><STRONG><a name="[17c]"></a>pinwake_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pmu_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_key_process
</UL>

<P><STRONG><a name="[75]"></a>debug_output_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pmu_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[2b8]"></a>disable_pullup_before_sleep</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pmu_config.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>enable_pullup_from_wakeup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pmu_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_enter_sleep_common
</UL>

<P><STRONG><a name="[1e5]"></a>led_all_off</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>

<P><STRONG><a name="[76]"></a>port_init</STRONG> (Thumb, 266 bytes, Stack size 4 bytes, port_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = port_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_all_off
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[17d]"></a>get_button_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_key_process
</UL>

<P><STRONG><a name="[92]"></a>pb_setting_from_wakeup</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, port_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_enter_sleep_common
</UL>

<P><STRONG><a name="[8f]"></a>pb_setting_before_sleep_common</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, port_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_enter_sleep_common
</UL>

<P><STRONG><a name="[1e8]"></a>pb_setting_before_sleep_end_spi0</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, port_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_end_ext_flash_operation
</UL>

<P><STRONG><a name="[1e7]"></a>pb_setting_before_sleep_end_spi1</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, port_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_end_rf_operation
</UL>

<P><STRONG><a name="[96]"></a>pb_setting_before_sleep_end_uart_or_usart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pb_setting_before_sleep_end_uart_or_usart &rArr; uart_rx_disable &rArr; uart_interrupt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_disable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_iv_low_power_manager
</UL>

<P><STRONG><a name="[93]"></a>pb_setting_none_sleep_end_uart_or_usart</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, port_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_iv_low_power_manager
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_enter_sleep_common
</UL>

<P><STRONG><a name="[97]"></a>pb_setting_before_sleep_end_485</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, port_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_iv_low_power_manager
</UL>

<P><STRONG><a name="[99]"></a>pb_setting_before_sleep_end_adc_power</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, port_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_iv_low_power_manager
</UL>

<P><STRONG><a name="[98]"></a>pb_setting_before_sleep_end_sensor_power</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_iv_low_power_manager
</UL>

<P><STRONG><a name="[8a]"></a>pb_setting_before_sleep_end_rf_operation</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, port_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pb_setting_before_sleep_end_rf_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_end_spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_enter_sleep
</UL>

<P><STRONG><a name="[8d]"></a>pb_setting_before_sleep_end_ext_flash_operation</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, port_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pb_setting_before_sleep_end_ext_flash_operation
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_end_spi0
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_enter_sleep
</UL>

<P><STRONG><a name="[1e9]"></a>vdrv_on</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, spi_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_init_from_wakeup
</UL>

<P><STRONG><a name="[11b]"></a>spi1_init</STRONG> (Thumb, 152 bytes, Stack size 4 bytes, spi_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdrv_on
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_InitSPI
</UL>

<P><STRONG><a name="[11d]"></a>spi1_write_buffer_with_addr</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, spi_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spi1_write_buffer_with_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_WriteBuffer
</UL>

<P><STRONG><a name="[11f]"></a>spi1_read_buffer_with_addr</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, spi_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spi1_read_buffer_with_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276_ReadBuffer
</UL>

<P><STRONG><a name="[84]"></a>spi1_init_from_wakeup</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, spi_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spi1_init_from_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vdrv_on
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_enter_sleep_common
</UL>

<P><STRONG><a name="[2b9]"></a>spi1_setting_before_sleep</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, spi_config.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>spi0_setting_before_sleep</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_config.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>wdtimer_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wdtimer_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_enter_sleep_common
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_reboot
</UL>

<P><STRONG><a name="[7a]"></a>wdtimer_init</STRONG> (Thumb, 234 bytes, Stack size 4 bytes, wdtimer_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wdtimer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[65]"></a>wdtimer_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wdtimer_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_enter_sleep_common
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_data_download_process
</UL>

<P><STRONG><a name="[68]"></a>wdtimer_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wdtimer_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_enter_sleep_common
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
</UL>

<P><STRONG><a name="[180]"></a>led_off</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_led_process
</UL>

<P><STRONG><a name="[1b7]"></a>led_on</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_data_download_process
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
</UL>

<P><STRONG><a name="[13d]"></a>led_red_on</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_check_stack
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_led_process
</UL>

<P><STRONG><a name="[13f]"></a>led_red_off</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_check_stack
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_led_process
</UL>

<P><STRONG><a name="[142]"></a>led_blue_on</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_led_process
</UL>

<P><STRONG><a name="[145]"></a>led_blue_off</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_led_process
</UL>

<P><STRONG><a name="[181]"></a>led_green_on</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_led_process
</UL>

<P><STRONG><a name="[182]"></a>led_green_off</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_led_process
</UL>

<P><STRONG><a name="[17f]"></a>led_start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_start &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Xus
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_led_process
</UL>

<P><STRONG><a name="[1ea]"></a>led_green_shining</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Xus
</UL>

<P><STRONG><a name="[194]"></a>led_red_shining</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_red_shining &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Xus
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_join_payload_timeout_event
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_join_payload_timeout_event
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_data_timeout_event
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_history_payload_timeout_event
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_quick_work_process
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_listen_router_event
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_request_join_payload
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_data_payload
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_history_payload
</UL>

<P><STRONG><a name="[185]"></a>led_blue_shing</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_blue_shing &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Xus
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcast_join_payload_timeout_event
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_broadcast_join_payload
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_full_cycle_monitor_payload
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_request_join_payload
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_data_payload
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_transmit_sensor_history_payload
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_father_broadcast_payload
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_analysis_process
</UL>

<P><STRONG><a name="[81]"></a>internal_adc_init</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, internal_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = internal_adc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SI32_SARADC_A_select_timeslot_channel_character_group
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init_from_reset
</UL>

<P><STRONG><a name="[1ec]"></a>internal_adc_get_channel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, internal_adc_option.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_initial_conversion
</UL>

<P><STRONG><a name="[1eb]"></a>internal_adc_sample</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, internal_adc_option.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_adc_sample &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Xus
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_initial_conversion
</UL>

<P><STRONG><a name="[160]"></a>internal_initial_conversion</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, internal_adc_option.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = internal_initial_conversion &rArr; internal_adc_sample &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_adc_sample
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_adc_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_sample_data
</UL>

<P><STRONG><a name="[f2]"></a>read_from_flash_to_buff</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, flash_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_from_flash_to_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_sysparam_to_buff
</UL>

<P><STRONG><a name="[1ed]"></a>write_to_flash_from_buff</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, flash_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
</UL>

<P><STRONG><a name="[1ef]"></a>erase_flash</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, flash_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = erase_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data_to_flash
</UL>

<P><STRONG><a name="[f0]"></a>write_data_to_flash</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, flash_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash_from_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_sysparam_to_flash
</UL>

<P><STRONG><a name="[166]"></a>uart_port_configuration</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_port_init
</UL>

<P><STRONG><a name="[168]"></a>uart_port_sleep</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_port_sleep
</UL>

<P><STRONG><a name="[1f0]"></a>uart_interrupt_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_interrupt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_disable
</UL>

<P><STRONG><a name="[16d]"></a>uart_rx_disable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_rx_disable &rArr; uart_interrupt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_rec_data
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_end_uart_or_usart
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_configuration
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample_event
</UL>

<P><STRONG><a name="[1e6]"></a>uart_tx_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_setting_before_sleep_end_uart_or_usart
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_bytes
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_configuration
</UL>

<P><STRONG><a name="[16a]"></a>uart_configuration</STRONG> (Thumb, 1864 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_configuration &rArr; uart_rx_disable &rArr; uart_interrupt_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_periph_clock
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_disable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_param_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_struct_init
</UL>

<P><STRONG><a name="[1f2]"></a>uart_struct_init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_configuration
</UL>

<P><STRONG><a name="[1f3]"></a>uart_interrupt_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_enable
</UL>

<P><STRONG><a name="[1f4]"></a>uart_tx_enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_tx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SI32_UART_B_enable_tx_output
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SI32_UART_B_enable_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_bytes
</UL>

<P><STRONG><a name="[16f]"></a>uart_rx_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_rx_enable &rArr; uart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample
</UL>

<P><STRONG><a name="[1f8]"></a>uart_send_byte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_bytes
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_string
</UL>

<P><STRONG><a name="[16e]"></a>uart_send_bytes</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_send_bytes &rArr; delay_Xus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Xus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SI32_UART_B_flush_tx_fifo
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_enable
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample
</UL>

<P><STRONG><a name="[1f9]"></a>uart_send_string</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
</UL>

<P><STRONG><a name="[2bb]"></a>_SI32_RSTSRC_A_initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>_SI32_RSTSRC_A_write_reseten</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>_SI32_RSTSRC_A_read_reseten</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>_SI32_RSTSRC_A_enable_vdd_monitor_reset_source</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>_SI32_RSTSRC_A_disable_vdd_monitor_reset_source</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>_SI32_RSTSRC_A_enable_missing_clock_detector_reset_source</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>_SI32_RSTSRC_A_disable_missing_clock_detector_reset_source</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>_SI32_RSTSRC_A_enable_watchdog_timer_reset_source</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>_SI32_RSTSRC_A_disable_watchdog_timer_reset_source</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>_SI32_RSTSRC_A_generate_software_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>_SI32_RSTSRC_A_enable_comparator0_reset_source</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>_SI32_RSTSRC_A_disable_comparator0_reset_source</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>_SI32_RSTSRC_A_enable_comparator1_reset_source</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>_SI32_RSTSRC_A_disable_comparator1_reset_source</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>_SI32_RSTSRC_A_enable_low_power_mode_charge_pump_reset_source</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>_SI32_RSTSRC_A_disable_low_power_mode_charge_pump_reset_source</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>_SI32_RSTSRC_A_enable_rtc0_reset_source</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>_SI32_RSTSRC_A_disable_rtc0_reset_source</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>_SI32_RSTSRC_A_enable_system_reset_to_low_power_charge_pump</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>_SI32_RSTSRC_A_disable_system_reset_to_low_power_charge_pump</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>_SI32_RSTSRC_A_enable_system_reset_to_uart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>_SI32_RSTSRC_A_disable_system_reset_to_uart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>_SI32_RSTSRC_A_enable_system_reset_to_lcd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>_SI32_RSTSRC_A_disable_system_reset_to_lcd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>_SI32_RSTSRC_A_enable_system_reset_to_acctr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>_SI32_RSTSRC_A_disable_system_reset_to_acctr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>_SI32_RSTSRC_A_enable_system_reset_to_rtc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>_SI32_RSTSRC_A_disable_system_reset_to_rtc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>_SI32_RSTSRC_A_get_last_reset_source</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, si32_rstsrc_a_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reset_source
</UL>

<P><STRONG><a name="[47]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget_arm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[2d7]"></a>fgetc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, retarget_arm.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget_arm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[2d8]"></a>__backspace</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget_arm.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget_arm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ITM_SendChar
</UL>

<P><STRONG><a name="[5b]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_arm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PBEXT0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PBEXT0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PBEXT0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PBEXT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PBEXT1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PBEXT1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>LPTIMER0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIMER0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMAERR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAERR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAERR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMACH0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMACH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMACH2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMACH3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMACH4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMACH5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMACH6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH6_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMACH7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH7_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMACH8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH8_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH8_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMACH9_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH9_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACH9_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER0L_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0L_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0L_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER0H_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0H_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0H_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER1L_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1L_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1L_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIMER1H_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1H_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1H_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIMER2L_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2L_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2L_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIMER2H_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2H_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2H_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ACCTR0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCTR0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCTR0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EPCA0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPCA0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPCA0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SARADC0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SARADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SARADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CMP0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CMP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DTM0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTM0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTM0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DTM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTM1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTM1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DTM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTM2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>AES0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ENCDEC0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENCDEC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENCDEC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>VDDLOW_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VDDLOW_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VDDLOW_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>VCPFAIL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCPFAIL_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCPFAIL_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DCDC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IDAC0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDAC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDAC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>PLL0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_sim3l1xx_arm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_sim3l1xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sim3l1xx_arm.o(.text)
</UL>
<P><STRONG><a name="[2d9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_sim3l1xx.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>_SI32_SARADC_A_initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>_SI32_SARADC_A_initialize_channels</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>_SI32_SARADC_A_write_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>_SI32_SARADC_A_read_config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>_SI32_SARADC_A_set_sampling_phase</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>_SI32_SARADC_A_enable_sampling_phase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>_SI32_SARADC_A_disable_sampling_phase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>_SI32_SARADC_A_enable_ssg_conversion_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>_SI32_SARADC_A_disable_ssg_conversion_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>_SI32_SARADC_A_select_output_packing_mode_upper_halfword_only</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>_SI32_SARADC_A_select_output_packing_mode_lower_halfword_only</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>_SI32_SARADC_A_select_output_packing_mode_upper_halfword_first</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>_SI32_SARADC_A_select_output_packing_mode_lower_halfword_first</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>_SI32_SARADC_A_enable_simultaneous_conversion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>_SI32_SARADC_A_disable_simultaneous_conversion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>_SI32_SARADC_A_enable_interleaved_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>_SI32_SARADC_A_disable_interleaved_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>_SI32_SARADC_A_enable_autoscan</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>_SI32_SARADC_A_disable_autoscan</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>_SI32_SARADC_A_select_autoscan_mode_once</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>_SI32_SARADC_A_select_autoscan_mode_loop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>_SI32_SARADC_A_enable_dma</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>_SI32_SARADC_A_disable_dma</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>_SI32_SARADC_A_select_burst_mode_clock_lposc0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>_SI32_SARADC_A_select_burst_mode_clock_apb_clock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>_SI32_SARADC_A_select_sar_clock_divider</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>_SI32_SARADC_A_enable_single_conversion_complete_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>_SI32_SARADC_A_disable_single_conversion_complete_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>_SI32_SARADC_A_is_single_conversion_complete_interrupt_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>_SI32_SARADC_A_enable_scan_done_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>_SI32_SARADC_A_disable_scan_done_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>_SI32_SARADC_A_is_scan_done_interrupt_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>_SI32_SARADC_A_enable_fifo_overrun_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>_SI32_SARADC_A_disable_fifo_overrun_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>_SI32_SARADC_A_is_fifo_overrun_interrupt_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>_SI32_SARADC_A_enable_fifo_underrun_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>_SI32_SARADC_A_disable_fifo_underrun_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>_SI32_SARADC_A_is_fifo_underrun_interrupt_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>_SI32_SARADC_A_write_control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>_SI32_SARADC_A_read_control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>_SI32_SARADC_A_select_reference_ground_internal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>_SI32_SARADC_A_select_reference_ground_external</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>_SI32_SARADC_A_select_rising_clock_edge_sampling</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>_SI32_SARADC_A_select_falling_clock_edge_sampling</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>_SI32_SARADC_A_select_burst_mode_track_time</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>_SI32_SARADC_A_select_start_of_conversion_source</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>_SI32_SARADC_A_select_burst_mode_power_up_time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>_SI32_SARADC_A_enable_burst_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>_SI32_SARADC_A_disable_burst_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>_SI32_SARADC_A_enable_module</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>_SI32_SARADC_A_disable_module</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>_SI32_SARADC_A_select_12bit_sample_mode_four</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>_SI32_SARADC_A_select_12bit_sample_mode_one</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>_SI32_SARADC_A_enable_common_mode_buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>_SI32_SARADC_A_disable_common_mode_buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>_SI32_SARADC_A_enable_accumulator</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>_SI32_SARADC_A_disable_accumulator</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>_SI32_SARADC_A_select_normal_track_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>_SI32_SARADC_A_select_delayed_track_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>_SI32_SARADC_A_start_conversion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>_SI32_SARADC_A_is_busy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>_SI32_SARADC_A_select_bias_power</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>_SI32_SARADC_A_enable_low_power_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>_SI32_SARADC_A_disable_low_power_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>_SI32_SARADC_A_enable_mux_vref_low_power_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>_SI32_SARADC_A_disable_mux_vref_low_power_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>_SI32_SARADC_A_select_vref_internal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>_SI32_SARADC_A_select_vref_vdd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>_SI32_SARADC_A_select_vref_ldo_output</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>_SI32_SARADC_A_select_vref_external</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>_SI32_SARADC_A_write_sq7654</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>_SI32_SARADC_A_read_sq7654</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>_SI32_SARADC_A_write_sq3210</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>_SI32_SARADC_A_read_sq3210</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>_SI32_SARADC_A_select_timeslot_channel_character_group</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_adc_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saradc_init
</UL>

<P><STRONG><a name="[324]"></a>_SI32_SARADC_A_select_timeslot0_to_use_characteristic0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>_SI32_SARADC_A_select_timeslot0_to_use_characteristic1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>_SI32_SARADC_A_select_timeslot0_to_use_characteristic2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>_SI32_SARADC_A_select_timeslot0_to_use_characteristic3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>_SI32_SARADC_A_select_timeslot1_to_use_characteristic0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>_SI32_SARADC_A_select_timeslot1_to_use_characteristic1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>_SI32_SARADC_A_select_timeslot1_to_use_characteristic2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>_SI32_SARADC_A_select_timeslot1_to_use_characteristic3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>_SI32_SARADC_A_select_timeslot2_to_use_characteristic0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>_SI32_SARADC_A_select_timeslot2_to_use_characteristic1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>_SI32_SARADC_A_select_timeslot2_to_use_characteristic2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>_SI32_SARADC_A_select_timeslot2_to_use_characteristic3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>_SI32_SARADC_A_select_timeslot3_to_use_characteristic0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>_SI32_SARADC_A_select_timeslot3_to_use_characteristic1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>_SI32_SARADC_A_select_timeslot3_to_use_characteristic2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>_SI32_SARADC_A_select_timeslot3_to_use_characteristic3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>_SI32_SARADC_A_select_timeslot4_to_use_characteristic0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>_SI32_SARADC_A_select_timeslot4_to_use_characteristic1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>_SI32_SARADC_A_select_timeslot4_to_use_characteristic2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>_SI32_SARADC_A_select_timeslot4_to_use_characteristic3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>_SI32_SARADC_A_select_timeslot5_to_use_characteristic0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>_SI32_SARADC_A_select_timeslot5_to_use_characteristic1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>_SI32_SARADC_A_select_timeslot5_to_use_characteristic2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>_SI32_SARADC_A_select_timeslot5_to_use_characteristic3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>_SI32_SARADC_A_select_timeslot6_to_use_characteristic0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>_SI32_SARADC_A_select_timeslot6_to_use_characteristic1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>_SI32_SARADC_A_select_timeslot6_to_use_characteristic2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>_SI32_SARADC_A_select_timeslot6_to_use_characteristic3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>_SI32_SARADC_A_select_timeslot7_to_use_characteristic0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>_SI32_SARADC_A_select_timeslot7_to_use_characteristic1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>_SI32_SARADC_A_select_timeslot7_to_use_characteristic2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>_SI32_SARADC_A_select_timeslot7_to_use_characteristic3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>_SI32_SARADC_A_select_timeslot_channel</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>_SI32_SARADC_A_select_timeslot0_channel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>_SI32_SARADC_A_select_timeslot1_channel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>_SI32_SARADC_A_select_timeslot2_channel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>_SI32_SARADC_A_select_timeslot3_channel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>_SI32_SARADC_A_select_timeslot4_channel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>_SI32_SARADC_A_select_timeslot5_channel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>_SI32_SARADC_A_select_timeslot6_channel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>_SI32_SARADC_A_select_timeslot7_channel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>_SI32_SARADC_A_write_char32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>_SI32_SARADC_A_read_char32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>_SI32_SARADC_A_write_char10</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>_SI32_SARADC_A_read_char10</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>_SI32_SARADC_A_select_channel_character_group_gain_one</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>_SI32_SARADC_A_select_channel_characteristic0_gain_one</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>_SI32_SARADC_A_select_channel_characteristic1_gain_one</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>_SI32_SARADC_A_select_channel_characteristic2_gain_one</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>_SI32_SARADC_A_select_channel_characteristic3_gain_one</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>_SI32_SARADC_A_select_channel_character_group_gain_half</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>_SI32_SARADC_A_select_channel_characteristic0_gain_half</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>_SI32_SARADC_A_select_channel_characteristic1_gain_half</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>_SI32_SARADC_A_select_channel_characteristic2_gain_half</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>_SI32_SARADC_A_select_channel_characteristic3_gain_half</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>_SI32_SARADC_A_select_burst_mode_repeat_count</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>_SI32_SARADC_A_select_channel_characteristic0_burst_mode_repeat_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>_SI32_SARADC_A_select_channel_characteristic1_burst_mode_repeat_count</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>_SI32_SARADC_A_select_channel_characteristic2_burst_mode_repeat_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>_SI32_SARADC_A_select_channel_characteristic3_burst_mode_repeat_count</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>_SI32_SARADC_A_select_number_of_left_shift_bits</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>_SI32_SARADC_A_select_channel_characteristic0_left_shift_bits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>_SI32_SARADC_A_select_channel_characteristic1_left_shift_bits</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>_SI32_SARADC_A_select_channel_characteristic2_left_shift_bits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>_SI32_SARADC_A_select_channel_characteristic3_left_shift_bits</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>_SI32_SARADC_A_enter_12bit_mode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saradc_init
</UL>

<P><STRONG><a name="[365]"></a>_SI32_SARADC_A_select_channel_characteristic0_12bit_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>_SI32_SARADC_A_select_channel_characteristic1_12bit_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>_SI32_SARADC_A_select_channel_characteristic2_12bit_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>_SI32_SARADC_A_select_channel_characteristic3_12bit_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>_SI32_SARADC_A_enter_10bit_mode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>_SI32_SARADC_A_select_channel_characteristic0_10bit_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>_SI32_SARADC_A_select_channel_characteristic1_10bit_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>_SI32_SARADC_A_select_channel_characteristic2_10bit_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>_SI32_SARADC_A_select_channel_characteristic3_10bit_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>_SI32_SARADC_A_enable_window_comparison_interrupt</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>_SI32_SARADC_A_enable_characteristic0_window_comparison_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>_SI32_SARADC_A_enable_characteristic1_window_comparison_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>_SI32_SARADC_A_enable_characteristic2_window_comparison_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>_SI32_SARADC_A_enable_characteristic3_window_comparison_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>_SI32_SARADC_A_disable_window_comparison_interrupt</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>_SI32_SARADC_A_disable_characteristic0_window_comparison_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>_SI32_SARADC_A_disable_characteristic1_window_comparison_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>_SI32_SARADC_A_disable_characteristic2_window_comparison_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>_SI32_SARADC_A_disable_characteristic3_window_comparison_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>_SI32_SARADC_A_is_characteristic0_window_comparison_interrupt_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>_SI32_SARADC_A_is_characteristic1_window_comparison_interrupt_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>_SI32_SARADC_A_is_characteristic2_window_comparison_interrupt_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>_SI32_SARADC_A_is_characteristic3_window_comparison_interrupt_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>_SI32_SARADC_A_read_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>_SI32_SARADC_A_write_wclimits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>_SI32_SARADC_A_read_wclimits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>_SI32_SARADC_A_select_greater_than_window_comparator_limit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>_SI32_SARADC_A_select_less_than_window_comparator_limit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>_SI32_SARADC_A_select_window_limits</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>_SI32_SARADC_A_write_acc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>_SI32_SARADC_A_clear_accumulator</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>_SI32_SARADC_A_write_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>_SI32_SARADC_A_read_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>_SI32_SARADC_A_is_window_compare_interrupt_pending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>_SI32_SARADC_A_clear_window_compare_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>_SI32_SARADC_A_is_single_conversion_complete_interrupt_pending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>_SI32_SARADC_A_clear_single_conversion_complete_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>_SI32_SARADC_A_is_scan_done_interrupt_pending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>_SI32_SARADC_A_clear_scan_done_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>_SI32_SARADC_A_is_fifo_overrun_interrupt_pending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>_SI32_SARADC_A_clear_fifo_overrun_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>_SI32_SARADC_A_is_fifo_underrun_interrupt_pending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>_SI32_SARADC_A_clear_fifo_underrun_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>_SI32_SARADC_A_is_any_interrupt_pending</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>_SI32_SARADC_A_clear_all_interrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>_SI32_SARADC_A_read_fifostatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>_SI32_SARADC_A_get_num_words_in_fifo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_saradc_a_type.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>_SI32_UART_B_initialize</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>_SI32_UART_B_write_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>_SI32_UART_B_read_config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>_SI32_UART_B_enable_rx_start_bit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>_SI32_UART_B_disable_rx_start_bit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>_SI32_UART_B_enable_rx_parity_bit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>_SI32_UART_B_disable_rx_parity_bit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>_SI32_UART_B_enable_rx_stop_bit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>_SI32_UART_B_disable_rx_stop_bit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>_SI32_UART_B_select_rx_stop_bits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>_SI32_UART_B_select_rx_parity</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>_SI32_UART_B_select_rx_data_length</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>_SI32_UART_B_enable_rx_irda_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>_SI32_UART_B_disable_rx_irda_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>_SI32_UART_B_enable_rx_signal_inversion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>_SI32_UART_B_disable_rx_signal_inversion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>_SI32_UART_B_enable_tx_start_bit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>_SI32_UART_B_disable_tx_start_bit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>_SI32_UART_B_enable_tx_parity_bit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>_SI32_UART_B_disable_tx_parity_bit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>_SI32_UART_B_enable_tx_stop_bit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>_SI32_UART_B_disable_tx_stop_bit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>_SI32_UART_B_select_tx_stop_bits</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>_SI32_UART_B_select_tx_parity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>_SI32_UART_B_select_tx_data_length</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>_SI32_UART_B_enable_tx_irda_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>_SI32_UART_B_disable_tx_irda_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>_SI32_UART_B_enable_tx_signal_inversion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>_SI32_UART_B_disable_tx_signal_inversion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>_SI32_UART_B_write_mode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>_SI32_UART_B_read_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>_SI32_UART_B_select_rtc_clock_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>_SI32_UART_B_select_apb_clock_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>_SI32_UART_B_enter_rtc_baud_rate_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>_SI32_UART_B_exit_rtc_baud_rate_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>_SI32_UART_B_select_internal_clock_on_demand</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>_SI32_UART_B_select_internal_clock_always_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>_SI32_UART_B_is_clock_switch_busy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>_SI32_UART_B_enable_rx_clock_switch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>_SI32_UART_B_disable_rx_clock_switch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>_SI32_UART_B_enable_tx_clock_switch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>_SI32_UART_B_disable_tx_clock_switch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3be]"></a>_SI32_UART_B_enable_stall_in_debug_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>_SI32_UART_B_disable_stall_in_debug_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>_SI32_UART_B_exit_loopback_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>_SI32_UART_B_enter_receive_loopback_mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>_SI32_UART_B_enter_transmit_loopback_mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>_SI32_UART_B_enter_full_loopback_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>_SI32_UART_B_enter_half_duplex_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>_SI32_UART_B_enter_full_duplex_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>_SI32_UART_B_disable_idle_tristate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3c7]"></a>_SI32_UART_B_enable_idle_tristate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>_SI32_UART_B_write_flowcn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>_SI32_UART_B_read_flowcn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>_SI32_UART_B_read_rx_input</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>_SI32_UART_B_enable_tx_output</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_enable
</UL>

<P><STRONG><a name="[3cb]"></a>_SI32_UART_B_disable_tx_output</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>_SI32_UART_B_read_tx_output</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>_SI32_UART_B_clear_tx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>_SI32_UART_B_set_tx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>_SI32_UART_B_select_tx_irda_pulse_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>_SI32_UART_B_write_control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>_SI32_UART_B_read_control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>_SI32_UART_B_is_rx_frame_error_interrupt_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3d3]"></a>_SI32_UART_B_clear_rx_frame_error_interrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>_SI32_UART_B_is_rx_parity_error_interrupt_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3d5]"></a>_SI32_UART_B_clear_rx_parity_error_interrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3d6]"></a>_SI32_UART_B_is_rx_overrun_interrupt_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>_SI32_UART_B_clear_rx_overrun_error_interrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>_SI32_UART_B_is_rx_data_request_interrupt_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3d9]"></a>_SI32_UART_B_clear_rx_data_request_interrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>_SI32_UART_B_enable_rx_error_interrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>_SI32_UART_B_disable_rx_error_interrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>_SI32_UART_B_is_rx_error_interrupts_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>_SI32_UART_B_enable_rx_data_request_interrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>_SI32_UART_B_disable_rx_data_request_interrupt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>_SI32_UART_B_is_rx_data_request_interrupt_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>_SI32_UART_B_exit_match_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3e1]"></a>_SI32_UART_B_enter_match_mode_store_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>_SI32_UART_B_enter_match_mode_generate_frame_error</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>_SI32_UART_B_enter_match_mode_store_bit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>_SI32_UART_B_enable_rx_autobaud</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>_SI32_UART_B_disable_rx_autobaud</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>_SI32_UART_B_is_rx_busy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>_SI32_UART_B_set_rbit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3e8]"></a>_SI32_UART_B_clear_rbit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3e9]"></a>_SI32_UART_B_read_rbit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ea]"></a>_SI32_UART_B_enable_rx_one_shot</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>_SI32_UART_B_disable_rx_one_shot</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>_SI32_UART_B_enable_rx_inhibit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ed]"></a>_SI32_UART_B_disable_rx_inhibit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ee]"></a>_SI32_UART_B_enable_rx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>_SI32_UART_B_disable_rx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>_SI32_UART_B_is_tx_data_request_interrupt_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3f1]"></a>_SI32_UART_B_is_tx_complete</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3f2]"></a>_SI32_UART_B_clear_tx_complete_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>_SI32_UART_B_select_tx_complete_threshold_end_of_transmission</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3f4]"></a>_SI32_UART_B_select_tx_complete_threshold_no_more_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>_SI32_UART_B_enable_tx_data_request_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3f6]"></a>_SI32_UART_B_disable_tx_data_request_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3f7]"></a>_SI32_UART_B_is_tx_data_request_interrupt_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>_SI32_UART_B_enable_tx_complete_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3f9]"></a>_SI32_UART_B_disable_tx_complete_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>_SI32_UART_B_is_tx_complete_interrupt_enabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3fb]"></a>_SI32_UART_B_is_tx_busy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>_SI32_UART_B_set_tbit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3fd]"></a>_SI32_UART_B_clear_tbit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3fe]"></a>_SI32_UART_B_enable_tx_inhibit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[3ff]"></a>_SI32_UART_B_disable_tx_inhibit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>_SI32_UART_B_enable_tx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_enable
</UL>

<P><STRONG><a name="[400]"></a>_SI32_UART_B_disable_tx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[401]"></a>_SI32_UART_B_write_ipdelay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>_SI32_UART_B_read_ipdelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>_SI32_UART_B_write_ipdelay_bits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>_SI32_UART_B_read_ipdelay_bits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>_SI32_UART_B_write_baudrate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>_SI32_UART_B_read_baudrate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>_SI32_UART_B_set_rx_baudrate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[408]"></a>_SI32_UART_B_set_tx_baudrate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[409]"></a>_SI32_UART_B_write_fifocn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[40a]"></a>_SI32_UART_B_read_fifocn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>_SI32_UART_B_read_rx_fifo_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>_SI32_UART_B_select_rx_fifo_threshold_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[40d]"></a>_SI32_UART_B_select_rx_fifo_threshold_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>_SI32_UART_B_select_rx_fifo_threshold_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[40f]"></a>_SI32_UART_B_flush_rx_fifo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>_SI32_UART_B_is_rx_fifo_error_interrupt_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>_SI32_UART_B_clear_rx_fifo_error_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[412]"></a>_SI32_UART_B_is_rx_shift_register_full</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>_SI32_UART_B_read_tx_fifo_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>_SI32_UART_B_select_tx_fifo_threshold_for_request_to_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>_SI32_UART_B_select_tx_fifo_threshold_for_request_to_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[416]"></a>_SI32_UART_B_select_tx_fifo_threshold_for_request_to_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>_SI32_UART_B_flush_tx_fifo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_bytes
</UL>

<P><STRONG><a name="[417]"></a>_SI32_UART_B_is_tx_fifo_error_interrupt_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[418]"></a>_SI32_UART_B_clear_tx_fifo_error_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[419]"></a>_SI32_UART_B_is_tx_shift_register_full</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>_SI32_UART_B_read_data_u32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>_SI32_UART_B_read_data_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[41c]"></a>_SI32_UART_B_read_data_u8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[41d]"></a>_SI32_UART_B_write_data_u32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[41e]"></a>_SI32_UART_B_write_data_u16</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[41f]"></a>_SI32_UART_B_write_data_u8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[420]"></a>_SI32_UART_B_write_clkdiv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[421]"></a>_SI32_UART_B_read_clkdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[422]"></a>_SI32_UART_B_select_clock_source_apb_div1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[423]"></a>_SI32_UART_B_select_clock_source_apb_div2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[424]"></a>_SI32_UART_B_select_clock_source_apb_div4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, si32_uart_b_type.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>find_character</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_character
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_disassemble
</UL>

<P><STRONG><a name="[1fc]"></a>at_assamble_setting_response</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, at_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_assamble_setting_response
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sfm_set_handler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_db_set_handler
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_da_set_handler
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsrc_op_handler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sms_set_handler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hdtc_set_handler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setp_set_handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_swv_set_handler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_calb_op_handler
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssc_set_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_frq_set_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwr_set_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssf_set_handler
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scr_set_handler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sbw_set_handler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rnrwt_set_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_slbd_set_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hisn_set_handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sptd_set_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftoc_set_handler
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tpto_set_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rtdc_set_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tsdc_set_handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssti_set_handler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdti_set_handler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pan_set_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mac_set_handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_null
</UL>

<P><STRONG><a name="[1fd]"></a>at_null</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, at_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_null &rArr; at_assamble_setting_response
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[1ff]"></a>letter_converter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at_operation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[1fe]"></a>at_analyzer</STRONG> (Thumb, 562 bytes, Stack size 8 bytes, at_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = at_analyzer &rArr; at_tsdc &rArr; at_tsdc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tsdc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tpto
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdti
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_swv
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssti
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssc
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sptd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sms
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_slbd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sfm
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setp
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scr
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sbw
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rtdc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rnrwt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwr
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pan
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mac
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hisn
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hdtc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsrc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_frq
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_db
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_da
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftoc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_calb
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_converter
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_null
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_item_analyzer
</UL>

<P><STRONG><a name="[21b]"></a>at_item_analyzer</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, at_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = at_item_analyzer &rArr; at_analyzer &rArr; at_tsdc &rArr; at_tsdc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_disassemble
</UL>

<P><STRONG><a name="[186]"></a>at_disassemble</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, at_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = at_disassemble &rArr; at_item_analyzer &rArr; at_analyzer &rArr; at_tsdc &rArr; at_tsdc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_item_analyzer
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_character
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
</UL>

<P><STRONG><a name="[21d]"></a>at_assamble_get_response</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, at_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sfm_get_handler
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_db_get_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_da_get_handler
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsrc_get_handler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sms_get_handler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hdtc_get_handler
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setp_get_handler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_swv_get_handler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssc_get_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_frq_get_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwr_get_handler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssf_get_handler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scr_get_handler
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sbw_get_handler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rnrwt_get_handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_slbd_get_handler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hisn_get_handler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sptd_get_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftoc_get_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tpto_get_handler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rtdc_get_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tsdc_get_handler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssti_get_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdti_get_handler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pan_get_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mac_get_handler
</UL>

<P><STRONG><a name="[187]"></a>clear_at_item</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, at_operation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_at_item
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
</UL>

<P><STRONG><a name="[21e]"></a>at_mac_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_mac_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mac
</UL>

<P><STRONG><a name="[21f]"></a>at_mac_set_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_mac_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_hex_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mac
</UL>

<P><STRONG><a name="[200]"></a>at_mac</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_mac &rArr; at_mac_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mac_set_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mac_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[220]"></a>at_pan_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_pan_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pan
</UL>

<P><STRONG><a name="[221]"></a>at_pan_set_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_pan_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_hex_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pan
</UL>

<P><STRONG><a name="[201]"></a>at_pan</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_pan &rArr; at_pan_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pan_set_handler
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pan_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[222]"></a>at_tdti_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_tdti_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdti
</UL>

<P><STRONG><a name="[223]"></a>at_tdti_set_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_tdti_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdti
</UL>

<P><STRONG><a name="[202]"></a>at_tdti</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_tdti &rArr; at_tdti_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdti_set_handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tdti_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[225]"></a>at_ssti_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_ssti_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssti
</UL>

<P><STRONG><a name="[226]"></a>at_ssti_set_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_ssti_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssti
</UL>

<P><STRONG><a name="[203]"></a>at_ssti</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_ssti &rArr; at_ssti_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssti_set_handler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssti_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[227]"></a>at_tsdc_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_tsdc_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tsdc
</UL>

<P><STRONG><a name="[228]"></a>at_tsdc_set_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_tsdc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tsdc
</UL>

<P><STRONG><a name="[205]"></a>at_tsdc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_tsdc &rArr; at_tsdc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tsdc_set_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tsdc_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[229]"></a>at_rtdc_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_rtdc_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rtdc
</UL>

<P><STRONG><a name="[22a]"></a>at_rtdc_set_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_rtdc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rtdc
</UL>

<P><STRONG><a name="[204]"></a>at_rtdc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_rtdc &rArr; at_rtdc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rtdc_set_handler
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rtdc_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[22b]"></a>at_tpto_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_tpto_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tpto
</UL>

<P><STRONG><a name="[22c]"></a>at_tpto_set_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_tpto_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tpto
</UL>

<P><STRONG><a name="[206]"></a>at_tpto</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_tpto &rArr; at_tpto_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tpto_set_handler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tpto_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[22d]"></a>at_cftoc_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_cftoc_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftoc
</UL>

<P><STRONG><a name="[22e]"></a>at_cftoc_set_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_cftoc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftoc
</UL>

<P><STRONG><a name="[208]"></a>at_cftoc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_cftoc &rArr; at_cftoc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftoc_set_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cftoc_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[22f]"></a>at_sptd_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_sptd_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sptd
</UL>

<P><STRONG><a name="[230]"></a>at_sptd_set_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_sptd_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sptd
</UL>

<P><STRONG><a name="[209]"></a>at_sptd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_sptd &rArr; at_sptd_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sptd_set_handler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sptd_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[231]"></a>at_hisn_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_hisn_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hisn
</UL>

<P><STRONG><a name="[232]"></a>at_hisn_set_handler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_hisn_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hisn
</UL>

<P><STRONG><a name="[207]"></a>at_hisn</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_hisn &rArr; at_hisn_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hisn_set_handler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hisn_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[233]"></a>at_slbd_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_slbd_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_slbd
</UL>

<P><STRONG><a name="[234]"></a>at_slbd_set_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_slbd_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_slbd
</UL>

<P><STRONG><a name="[20a]"></a>at_slbd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_slbd &rArr; at_slbd_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_slbd_set_handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_slbd_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[235]"></a>at_rnrwt_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_rnrwt_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rnrwt
</UL>

<P><STRONG><a name="[236]"></a>at_rnrwt_set_handler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_rnrwt_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rnrwt
</UL>

<P><STRONG><a name="[20b]"></a>at_rnrwt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_rnrwt &rArr; at_rnrwt_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rnrwt_set_handler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rnrwt_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[237]"></a>at_sbw_get_handler</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_sbw_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_sbw_to_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sbw
</UL>

<P><STRONG><a name="[238]"></a>at_sbw_set_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_sbw_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_ascii_to_sbw
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_bw
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sbw
</UL>

<P><STRONG><a name="[20c]"></a>at_sbw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_sbw &rArr; at_sbw_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sbw_set_handler
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sbw_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[239]"></a>at_scr_get_handler</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_scr_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_scr_to_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scr
</UL>

<P><STRONG><a name="[23a]"></a>at_scr_set_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_scr_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_ascii_to_scr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scr
</UL>

<P><STRONG><a name="[20d]"></a>at_scr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_scr &rArr; at_scr_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scr_set_handler
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scr_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[23b]"></a>at_ssf_get_handler</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_ssf_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_ssf_to_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssf
</UL>

<P><STRONG><a name="[23c]"></a>at_ssf_set_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_ssf_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_ascii_to_ssf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssf
</UL>

<P><STRONG><a name="[20e]"></a>at_ssf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_ssf &rArr; at_ssf_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssf_set_handler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssf_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[23d]"></a>at_pwr_get_handler</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_pwr_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwr
</UL>

<P><STRONG><a name="[23e]"></a>at_pwr_set_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_pwr_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwr
</UL>

<P><STRONG><a name="[20f]"></a>at_pwr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_pwr &rArr; at_pwr_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwr_set_handler
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_pwr_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[23f]"></a>at_frq_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_frq_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_frq
</UL>

<P><STRONG><a name="[240]"></a>at_frq_set_handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_frq_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_frq
</UL>

<P><STRONG><a name="[210]"></a>at_frq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_frq &rArr; at_frq_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_frq_set_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_frq_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[241]"></a>at_ssc_get_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_ssc_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssc
</UL>

<P><STRONG><a name="[242]"></a>at_ssc_set_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_ssc_set_handler &rArr; at_assamble_setting_response
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_sen_work_ev
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssc
</UL>

<P><STRONG><a name="[211]"></a>at_ssc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_ssc &rArr; at_ssc_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssc_set_handler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ssc_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[243]"></a>at_calb_op_handler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_calb_op_handler &rArr; at_assamble_setting_response
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_calb
</UL>

<P><STRONG><a name="[425]"></a>at_calb_get_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_cmd.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>at_calb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = at_calb &rArr; at_calb_op_handler &rArr; at_assamble_setting_response
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_calb_op_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[244]"></a>at_swv_get_handler</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_swv_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_software_version
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_swv
</UL>

<P><STRONG><a name="[246]"></a>at_swv_set_handler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_swv_set_handler &rArr; at_assamble_setting_response
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_swv
</UL>

<P><STRONG><a name="[213]"></a>at_swv</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at_swv &rArr; at_swv_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_swv_set_handler
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_swv_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[247]"></a>at_setp_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_setp_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setp
</UL>

<P><STRONG><a name="[248]"></a>at_setp_set_handler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_setp_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setp
</UL>

<P><STRONG><a name="[217]"></a>at_setp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_setp &rArr; at_setp_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setp_set_handler
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setp_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[249]"></a>at_hdtc_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_hdtc_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hdtc
</UL>

<P><STRONG><a name="[24a]"></a>at_hdtc_set_handler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_hdtc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hdtc
</UL>

<P><STRONG><a name="[218]"></a>at_hdtc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_hdtc &rArr; at_hdtc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hdtc_set_handler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hdtc_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[24b]"></a>at_sms_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>

<P><STRONG><a name="[24c]"></a>at_sms_set_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_sms_set_handler &rArr; at_assamble_setting_response
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sms
</UL>

<P><STRONG><a name="[219]"></a>at_sms</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = at_sms &rArr; at_sms_set_handler &rArr; at_assamble_setting_response
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sms_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[24d]"></a>at_fsrc_get_handler</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_fsrc_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_parameter_display
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsrc
</UL>

<P><STRONG><a name="[24f]"></a>at_fsrc_op_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_fsrc_op_handler &rArr; at_assamble_setting_response
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsrc
</UL>

<P><STRONG><a name="[21a]"></a>at_fsrc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at_fsrc &rArr; at_fsrc_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsrc_op_handler
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_fsrc_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[250]"></a>at_da_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_da_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_da
</UL>

<P><STRONG><a name="[251]"></a>at_da_set_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_da_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_da
</UL>

<P><STRONG><a name="[214]"></a>at_da</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_da &rArr; at_da_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_da_set_handler
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_da_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[252]"></a>at_db_get_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_db_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_db
</UL>

<P><STRONG><a name="[253]"></a>at_db_set_handler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_db_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_db
</UL>

<P><STRONG><a name="[215]"></a>at_db</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_db &rArr; at_db_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_db_set_handler
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_db_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[254]"></a>at_sfm_get_handler</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_sfm_get_handler &rArr; at_assamble_get_response
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_to_ascii_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sfm
</UL>

<P><STRONG><a name="[255]"></a>at_sfm_set_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_sfm_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sysparam
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_dec_in_order
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sfm
</UL>

<P><STRONG><a name="[216]"></a>at_sfm</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_sfm &rArr; at_sfm_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sfm_set_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sfm_get_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_listen_router_event
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_transmit_value
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sample_value
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_next_sample_start_line_by_mils
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_current_time
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_time_by_seconds
</UL>

<P><STRONG><a name="[426]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC0ALRM_IRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_time
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_buff
</UL>

<P><STRONG><a name="[260]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[261]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[4e]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[50]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[427]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[c1]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_time32
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_time
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rand_transmit_time
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_transmit_event
</UL>

<P><STRONG><a name="[52]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[d2]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_version_compare
</UL>

<P><STRONG><a name="[116]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_analyzer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_ascii_to_ssf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_ascii_to_scr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_ascii_to_sbw
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_get_response
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_item_analyzer
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_assamble_setting_response
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_cache_buffer
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_ssf_to_ascii
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_scr_to_ascii
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_sbw_to_ascii
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disassemble_rx_frame
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sensor_payload
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_relay_data_payload
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_sensor_data_payload
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_quick_work_data_payload
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assambel_sensor_sen_payload
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_put
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_config_payload_stage_payload
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_boot_to_sram
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_write_broadcast_program
</UL>

<P><STRONG><a name="[25b]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[428]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[429]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[42b]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_broadcast_program_data
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_read_data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_download_flash_data
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_set_flash_ack
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_rf_send_payload
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_at_item
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_map
</UL>

<P><STRONG><a name="[25e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[25d]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample
</UL>

<P><STRONG><a name="[42c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[42d]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[257]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[256]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[262]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[57]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[259]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_parse_recv_data
</UL>

<P><STRONG><a name="[265]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_parse_recv_data
</UL>

<P><STRONG><a name="[268]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[26f]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_parse_recv_data
</UL>

<P><STRONG><a name="[26b]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next_sample_start_line
</UL>

<P><STRONG><a name="[26c]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_transmit_moment_event
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_transmit_event
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_event
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_data_timeout_event
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_history_payload_timeout_event
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_quick_work_process
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sen_work_process
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_power_rotonic
</UL>

<P><STRONG><a name="[26d]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sen_work_process
</UL>

<P><STRONG><a name="[42e]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[173]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next_sample_start_line
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_transmit_moment_event
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_transmit_event
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_event
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_time
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_data_timeout_event
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_history_payload_timeout_event
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_quick_work_process
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_parse_recv_data
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_power_rotonic
</UL>

<P><STRONG><a name="[42f]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[1a1]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_time_by_mils
</UL>

<P><STRONG><a name="[430]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[17b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_check
</UL>

<P><STRONG><a name="[26e]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[431]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[1a2]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next_sample_start_line
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_transmit_moment_event
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_transmit_event
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_event
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_time
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_data_timeout_event
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit_sensor_history_payload_timeout_event
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_rf_transmit_process
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_quick_work_process
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_sen_work_process
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_cycle_work_process
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_time_by_mils
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_power_rotonic
</UL>

<P><STRONG><a name="[270]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[267]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_d
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[26a]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[432]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[271]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_check
</UL>

<P><STRONG><a name="[273]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[433]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[275]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_parse_recv_data
</UL>

<P><STRONG><a name="[277]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[274]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[266]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_check
</UL>

<P><STRONG><a name="[278]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_time
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_time_by_mils
</UL>

<P><STRONG><a name="[27a]"></a>_ll_ufrom_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[70]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, si32_system_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMATCH_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>update_time</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_rtc_time
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_adjust
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_thread_etimer_process
</UL>

<P><STRONG><a name="[4]"></a>process_thread_etimer_process</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = process_thread_etimer_process &rArr; timer_expired &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> etimer.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>add_timer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, etimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_request_poll
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_time
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>

<P><STRONG><a name="[a4]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, etimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_adjust
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>

<P><STRONG><a name="[a5]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, etimer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_adjust
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_restart
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
</UL>

<P><STRONG><a name="[ad]"></a>exit_process</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_is_running
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_exit
</UL>

<P><STRONG><a name="[af]"></a>call_process</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post_synch
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_process
</UL>

<P><STRONG><a name="[b0]"></a>do_poll</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = do_poll &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_run
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_event
</UL>

<P><STRONG><a name="[b1]"></a>do_event</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = do_event &rArr; do_poll &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_poll
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_process
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_run
</UL>

<P><STRONG><a name="[d4]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensor_sixteen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_put
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sixteen_data
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_elements
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_get
</UL>

<P><STRONG><a name="[d5]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensor_sixteen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_put
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sixteen_data
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_elements
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_get
</UL>

<P><STRONG><a name="[146]"></a>flash_tat_get_status</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hal_read_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_set_page_size
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_flash_status
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_check_idle
</UL>

<P><STRONG><a name="[14c]"></a>flash_tat_get_id</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = flash_tat_get_id &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hal_read_buff
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_check_idle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_enter_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[14e]"></a>flash_tat_set_page_size</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ext_flash_tat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = flash_tat_set_page_size &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_get_status
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_hal_write_buff
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_leave_sleep
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_check_idle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_enter_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[5]"></a>process_thread_key_process</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, key_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = process_thread_key_process &rArr; etimer_set &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinwake_enable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinwake_disable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_process.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>process_thread_led_process</STRONG> (Thumb, 738 bytes, Stack size 24 bytes, led_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = process_thread_led_process &rArr; etimer_reset &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_on
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_off
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_on
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_off
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_green_on
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_green_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_process.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>process_thread_analysis_process</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, analysis_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = process_thread_analysis_process &rArr; analyst_payload &rArr; analyst_config_payload_stage_payload &rArr; at_disassemble &rArr; at_item_analyzer &rArr; at_analyzer &rArr; at_tsdc &rArr; at_tsdc_set_handler &rArr; update_sysparam &rArr; copy_sysparam_to_flash &rArr; write_data_to_flash &rArr; write_to_flash_from_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blue_shing
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyst_payload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analysis_process.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>process_thread_cycle_work_process</STRONG> (Thumb, 728 bytes, Stack size 48 bytes, cycle_work_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = process_thread_cycle_work_process &rArr; sensor_sample &rArr; save_sensor_data_from_ram_to_flash &rArr; save_sixteen_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_stop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_reset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_flash
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_spd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx127x_modify_frq
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_father_info
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_join_net_ack_info
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_spd_parameter
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_set_flash_ack
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayXms
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slep_low_power_parameter
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_low_power_parameter
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_sen_work_timer
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_transmit_start_line_etimer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_transmit_moment_etimer
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_transmit_duration_etimer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_random_transmit_etimer
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_quick_work_timer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_software_reset_source
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_quick_work_ev
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sample
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_listen_router_event
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen_router_fail_event
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_sample_cycle_timer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_transmit_timeout_etimer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_rf_listen_broadcast_etimer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_cycle_work_ev
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_led_etimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cycle_work_process.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>process_thread_sen_work_process</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, sen_work_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = process_thread_sen_work_process &rArr; assambel_sensor_sen_payload &rArr; sensor_sixteen_buffer_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assambel_sensor_sen_payload
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_sen_work_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sen_work_process.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>process_thread_data_download_process</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, data_download_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = process_thread_data_download_process &rArr; assamble_data_download_payload &rArr; read_download_flash_data &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdtimer_start
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_empty
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_data_download_payload
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_data_download_ev
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_erase_chip_nonblock
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_check_idle
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tat_enter_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_download_process.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>process_thread_quick_work_process</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, quick_work_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = process_thread_quick_work_process &rArr; etimer_reset &rArr; add_timer &rArr; update_time &rArr; clock_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transmit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assamble_communication_test_payload
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_infos
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_quick_work_timer
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_red_shining
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quick_work_process.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>process_thread_rf_transmit_process</STRONG> (Thumb, 572 bytes, Stack size 48 bytes, rf_transmit_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = process_thread_rf_transmit_process &rArr; sensor_process_transmit &rArr; save_sensor_data_from_ram_to_flash &rArr; save_sixteen_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_reset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_set
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_transmit_moment_event
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_random_transmit_event
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_time
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_transmit_timeout
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rf_transmit_ev
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_transmit_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_transmit_process.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>process_thread_sensor_manager_process</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, sensor_manager_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = process_thread_sensor_manager_process &rArr; sensor_process_init &rArr; process_start &rArr; process_post_synch &rArr; call_process &rArr; exit_process &rArr;  call_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_post
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_process_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_sen_work_ev
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_cycle_work_ev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_manager_process.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>process_thread_sensor_rotonic_process</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, sensor_rotonic_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = process_thread_sensor_rotonic_process &rArr; sensor_sixteen_buffer_put &rArr; save_sixteen_data &rArr; storage_write_data &rArr; storage_write_new_page &rArr; storage_find_idle_page &rArr; flash_tat_read_data &rArr; flash_tat_check_idle &rArr; flash_tat_get_status &rArr; flash_hal_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCDC_SET
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_sixteen_buffer_put
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etimer_stop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_check
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_parse_recv_data
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_param_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_port_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_sample_data
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waiting_power_rotonic
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_composite_format_data
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample_event
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotonic_sample_collect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensor_rotonic_process.o(.data)
</UL>
<P><STRONG><a name="[1d4]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_from_reset
</UL>

<P><STRONG><a name="[1d5]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_from_reset
</UL>

<P><STRONG><a name="[1ee]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_flash_from_buff
</UL>

<P><STRONG><a name="[1f1]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_enable
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_disable
</UL>

<P><STRONG><a name="[1fa]"></a>ITM_SendChar</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, retarget_arm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[272]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[269]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[279]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[276]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[48]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
